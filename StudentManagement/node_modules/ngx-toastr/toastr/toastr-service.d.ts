import { ComponentRef, Injector } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { Observable } from 'rxjs/Observable';
import { Overlay } from '../overlay/overlay';
import { ToastContainerDirective } from './toast-directive';
import { ToastRef } from './toast-injector';
import { GlobalConfig, IndividualConfig } from './toastr-config';
export interface ActiveToast {
    toastId?: number;
    message?: string;
    portal?: ComponentRef<any>;
    toastRef: ToastRef<any>;
    onShown?: Observable<any>;
    onHidden?: Observable<any>;
    onTap?: Observable<any>;
    onAction?: Observable<any>;
}
export declare class ToastrService {
    private overlay;
    private _injector;
    private sanitizer;
    toastrConfig: GlobalConfig;
    private index;
    private previousToastMessage?;
    currentlyActive: number;
    toasts: ActiveToast[];
    overlayContainer: ToastContainerDirective;
    constructor(toastrConfig: GlobalConfig, overlay: Overlay, _injector: Injector, sanitizer: DomSanitizer);
    /** show toast */
    show(message?: string, title?: string, override?: Partial<IndividualConfig>, type?: string): ActiveToast | null;
    /** show successful toast */
    success(message?: string, title?: string, override?: Partial<IndividualConfig>): ActiveToast | null;
    /** show error toast */
    error(message?: string, title?: string, override?: Partial<IndividualConfig>): ActiveToast | null;
    /** show info toast */
    info(message?: string, title?: string, override?: Partial<IndividualConfig>): ActiveToast | null;
    /** show warning toast */
    warning(message?: string, title?: string, override?: Partial<IndividualConfig>): ActiveToast | null;
    /**
     * Remove all or a single toast by id
     */
    clear(toastId?: number): void;
    /**
     * Remove and destroy a single toast by id
     */
    remove(toastId: number): boolean;
    /**
     * Determines if toast message is already shown
     */
    isDuplicate(message: string): boolean;
    /** create a clone of global config and apply individual settings */
    private applyConfig(override?);
    /**
     * Find toast object by id
     */
    private _findToast(toastId);
    /**
     * Creates and attaches toast data to component
     * returns null if toast is duplicate and preventDuplicates == True
     */
    private _buildNotification(toastType, message, title, config);
}
