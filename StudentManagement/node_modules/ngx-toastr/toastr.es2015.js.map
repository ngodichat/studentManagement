{"version":3,"file":"toastr.es2015.js","sources":["../../src/lib/portal/portal.ts","../../src/lib/portal/dom-portal-host.ts","../../src/lib/overlay/overlay-ref.ts","../../src/lib/overlay/overlay-container.ts","../../src/lib/overlay/overlay.ts","../../src/lib/toastr/toast-directive.ts","../../src/lib/toastr/toastr-config.ts","../../src/lib/toastr/default-config.ts","../../src/lib/toastr/toast-injector.ts","../../src/lib/toastr/toast-token.ts","../../src/lib/toastr/toastr-service.ts","../../src/lib/toastr/toast-component.ts","../../src/lib/toastr/toastr-module.ts","../../src/lib/index.ts"],"sourcesContent":["import {\n  ViewContainerRef,\n  ComponentRef,\n  Injector\n} from '@angular/core';\n\nexport interface ComponentType<T> {\n  new (...args: any[]): T;\n}\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nexport class ComponentPortal<T> {\nprivate _attachedHost?: BasePortalHost;\n/**\n * The type of the component that will be instantiated for attachment.\n */\ncomponent: ComponentType<T>;\n/**\n * [Optional] Where the attached component should live in Angular's *logical* component tree.\n * This is different from where the component *renders*, which is determined by the PortalHost.\n * The origin necessary when the host is outside of the Angular application context.\n */\nviewContainerRef: ViewContainerRef;\n/**\n * Injector used for the instantiation of the component.\n */\ninjector: Injector;\n/**\n * @param {?} component\n * @param {?} injector\n */\nconstructor(component: ComponentType<T>, injector: Injector) {\n    this.component = component;\n    this.injector = injector;\n  }\n/**\n * Attach this portal to a host.\n * @param {?} host\n * @param {?} newestOnTop\n * @return {?}\n */\nattach(host: BasePortalHost, newestOnTop: boolean) {\n    this._attachedHost = host;\n    return host.attach(this, newestOnTop);\n  }\n/**\n * Detach this portal from its host\n * @return {?}\n */\ndetach() {\n    const /** @type {?} */ host = this._attachedHost;\n    if (host) {\n      this._attachedHost = undefined;\n      return host.detach();\n    }\n  }\n/**\n * Whether this portal is attached to a host.\n * @return {?}\n */\nget isAttached(): boolean {\n    return this._attachedHost != null;\n  }\n/**\n * Sets the PortalHost reference without performing `attach()`. This is used directly by\n * the PortalHost when it is performing an `attach()` or `detach()`.\n * @param {?=} host\n * @return {?}\n */\nsetAttachedHost(host?: BasePortalHost) {\n    this._attachedHost = host;\n  }\n}\n\nfunction ComponentPortal_tsickle_Closure_declarations() {\n/** @type {?} */\nComponentPortal.prototype._attachedHost;\n/**\n * The type of the component that will be instantiated for attachment.\n * @type {?}\n */\nComponentPortal.prototype.component;\n/**\n * [Optional] Where the attached component should live in Angular's *logical* component tree.\n * This is different from where the component *renders*, which is determined by the PortalHost.\n * The origin necessary when the host is outside of the Angular application context.\n * @type {?}\n */\nComponentPortal.prototype.viewContainerRef;\n/**\n * Injector used for the instantiation of the component.\n * @type {?}\n */\nComponentPortal.prototype.injector;\n}\n\n/**\n * Partial implementation of PortalHost that only deals with attaching a\n * ComponentPortal\n * @abstract\n */\nexport abstract class BasePortalHost {\n/**\n * The portal currently attached to the host.\n */\nprivate _attachedPortal?: ComponentPortal<any>;\n/**\n * A function that will permanently dispose this host.\n */\nprivate _disposeFn?: () => void;\n/**\n * @param {?} portal\n * @param {?} newestOnTop\n * @return {?}\n */\nattach(portal: ComponentPortal<any>, newestOnTop: boolean) {\n    this._attachedPortal = portal;\n    return this.attachComponentPortal(portal, newestOnTop);\n  }\n/**\n * @abstract\n * @template T\n * @param {?} portal\n * @param {?} newestOnTop\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>, newestOnTop: boolean) {}\n/**\n * @return {?}\n */\ndetach() {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost();\n    }\n\n    this._attachedPortal = undefined;\n    if (this._disposeFn) {\n      this._disposeFn();\n      this._disposeFn = undefined;\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nsetDisposeFn(fn: () => void) {\n    this._disposeFn = fn;\n  }\n}\n\nfunction BasePortalHost_tsickle_Closure_declarations() {\n/**\n * The portal currently attached to the host.\n * @type {?}\n */\nBasePortalHost.prototype._attachedPortal;\n/**\n * A function that will permanently dispose this host.\n * @type {?}\n */\nBasePortalHost.prototype._disposeFn;\n}\n\n","import {\n  ComponentFactoryResolver,\n  ComponentRef,\n  EmbeddedViewRef,\n  ApplicationRef,\n} from '@angular/core';\nimport { BasePortalHost, ComponentPortal } from './portal';\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n * \n * This is the only part of the portal core that directly touches the DOM.\n */\nexport class DomPortalHost extends BasePortalHost {\n/**\n * @param {?} _hostDomElement\n * @param {?} _componentFactoryResolver\n * @param {?} _appRef\n */\nconstructor(\nprivate _hostDomElement: Element,\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _appRef: ApplicationRef,\n  ) {\n    super();\n  }\n/**\n * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n * @template T\n * @param {?} portal Portal to be attached\n * @param {?} newestOnTop\n * @return {?}\n */\nattachComponentPortal<T>(\n    portal: ComponentPortal<T>,\n    newestOnTop: boolean,\n  ): ComponentRef<T> {\n    const /** @type {?} */ componentFactory = this._componentFactoryResolver.resolveComponentFactory(\n      portal.component,\n    );\n    let /** @type {?} */ componentRef: ComponentRef<T>;\n\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the ChangeDetector for that component to the application (which\n    // happens automatically when using a ViewContainer).\n    componentRef = componentFactory.create(portal.injector);\n\n    // When creating a component outside of a ViewContainer, we need to manually register\n    // its ChangeDetector with the application. This API is unfortunately not yet published\n    // in Angular core. The change detector must also be deregistered when the component\n    // is destroyed to prevent memory leaks.\n    this._appRef.attachView(componentRef.hostView);\n\n    this.setDisposeFn(() => {\n      this._appRef.detachView(componentRef.hostView);\n      componentRef.destroy();\n    });\n\n    // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n    if (newestOnTop) {\n      this._hostDomElement.insertBefore(\n        this._getComponentRootNode(componentRef),\n        this._hostDomElement.firstChild,\n      );\n    } else {\n      this._hostDomElement.appendChild(\n        this._getComponentRootNode(componentRef),\n      );\n    }\n\n    return componentRef;\n  }\n/**\n * Gets the root HTMLElement for an instantiated component.\n * @param {?} componentRef\n * @return {?}\n */\nprivate _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n    return /** @type {?} */(( ( /** @type {?} */((componentRef.hostView as EmbeddedViewRef<any>))).rootNodes[0] as HTMLElement));\n  }\n}\n\nfunction DomPortalHost_tsickle_Closure_declarations() {\n/** @type {?} */\nDomPortalHost.prototype._hostDomElement;\n/** @type {?} */\nDomPortalHost.prototype._componentFactoryResolver;\n/** @type {?} */\nDomPortalHost.prototype._appRef;\n}\n\n","import { ComponentRef } from '@angular/core';\nimport { BasePortalHost, ComponentPortal } from '../portal/portal';\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef {\n/**\n * @param {?} _portalHost\n */\nconstructor(private _portalHost: BasePortalHost) {}\n/**\n * @param {?} portal\n * @param {?=} newestOnTop\n * @return {?}\n */\nattach(\n    portal: ComponentPortal<any>,\n    newestOnTop: boolean = true,\n  ): ComponentRef<any> {\n    return this._portalHost.attach(portal, newestOnTop);\n  }\n/**\n * Detaches an overlay from a portal.\n * @return {?} Resolves when the overlay has been detached.\n */\ndetach() {\n    return this._portalHost.detach();\n  }\n}\n\nfunction OverlayRef_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayRef.prototype._portalHost;\n}\n\n","\n/**\n * The OverlayContainer is the container in which all overlays will load.\n * It should be provided in the root component to ensure it is properly shared.\n */\nexport class OverlayContainer {\nprivate _containerElement: HTMLElement;\n/**\n * This method returns the overlay container element.  It will lazily\n * create the element the first time  it is called to facilitate using\n * the container in non-browser environments.\n * @return {?} the container element\n */\ngetContainerElement(): HTMLElement {\n    if (!this._containerElement) { this._createContainer(); }\n    return this._containerElement;\n  }\n/**\n * Create the overlay container element, which is simply a div\n * with the 'cdk-overlay-container' class on the document body.\n * @return {?}\n */\nprivate _createContainer(): void {\n    const /** @type {?} */ container = document.createElement('div');\n    container.classList.add('overlay-container');\n    document.body.appendChild(container);\n    this._containerElement = container;\n  }\n}\n\nfunction OverlayContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayContainer.prototype._containerElement;\n}\n\n","import { ComponentFactoryResolver, Injectable, ApplicationRef } from '@angular/core';\nimport { DomPortalHost } from '../portal/dom-portal-host';\nimport { OverlayRef } from './overlay-ref';\n\nimport { OverlayContainer } from './overlay-container';\nimport { ToastContainerDirective } from '../toastr/toast-directive';\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n * \n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\nexport class Overlay {\nprivate _paneElements: {string?: HTMLElement} = {};\n/**\n * @param {?} _overlayContainer\n * @param {?} _componentFactoryResolver\n * @param {?} _appRef\n */\nconstructor(private _overlayContainer: OverlayContainer,\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _appRef: ApplicationRef) {}\n/**\n * Creates an overlay.\n * @param {?=} positionClass\n * @param {?=} overlayContainer\n * @return {?} A reference to the created overlay.\n */\ncreate(positionClass?: string, overlayContainer?: ToastContainerDirective): OverlayRef {\n    // get existing pane if possible\n    return this._createOverlayRef(this.getPaneElement(positionClass, overlayContainer));\n  }\n/**\n * @param {?=} positionClass\n * @param {?=} overlayContainer\n * @return {?}\n */\ngetPaneElement(positionClass: string = '', overlayContainer?: ToastContainerDirective): HTMLElement {\n    if (!this._paneElements[positionClass]) {\n      this._paneElements[positionClass] = this._createPaneElement(positionClass, overlayContainer);\n    }\n    return this._paneElements[positionClass];\n  }\n/**\n * Creates the DOM element for an overlay and appends it to the overlay container.\n * @param {?} positionClass\n * @param {?=} overlayContainer\n * @return {?} Newly-created pane element\n */\nprivate _createPaneElement(positionClass: string, overlayContainer?: ToastContainerDirective): HTMLElement {\n    const /** @type {?} */ pane = document.createElement('div');\n    pane.id = 'toast-container';\n    pane.classList.add(positionClass);\n\n    if (!overlayContainer) {\n      this._overlayContainer.getContainerElement().appendChild(pane);\n    } else {\n      overlayContainer.getContainerElement().appendChild(pane);\n    }\n    return pane;\n  }\n/**\n * Create a DomPortalHost into which the overlay content can be loaded.\n * @param {?} pane The DOM element to turn into a portal host.\n * @return {?} A portal host for the given DOM element.\n */\nprivate _createPortalHost(pane: HTMLElement): DomPortalHost {\n    return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef);\n  }\n/**\n * Creates an OverlayRef for an overlay in the given DOM element.\n * @param {?} pane DOM element for the overlay\n * @return {?}\n */\nprivate _createOverlayRef(pane: HTMLElement): OverlayRef {\n    return new OverlayRef(this._createPortalHost(pane));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: OverlayContainer, },\n{type: ComponentFactoryResolver, },\n{type: ApplicationRef, },\n];\n}\n\nfunction Overlay_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlay.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlay.ctorParameters;\n/** @type {?} */\nOverlay.prototype._paneElements;\n/** @type {?} */\nOverlay.prototype._overlayContainer;\n/** @type {?} */\nOverlay.prototype._componentFactoryResolver;\n/** @type {?} */\nOverlay.prototype._appRef;\n}\n\n/**\n * Providers for Overlay and its related injectables.\n */\nexport const OVERLAY_PROVIDERS = [\n  Overlay,\n  OverlayContainer,\n];\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  NgModule,\n  ModuleWithProviders,\n  Directive,\n  ElementRef,\n} from '@angular/core';\nexport class ToastContainerDirective {\n/**\n * @param {?} el\n */\nconstructor(private el: ElementRef) { }\n/**\n * @return {?}\n */\ngetContainerElement(): HTMLElement {\n    return this.el.nativeElement;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[toastContainer]',\n  exportAs: 'toastContainer',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\n}\n\nfunction ToastContainerDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nToastContainerDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nToastContainerDirective.ctorParameters;\n/** @type {?} */\nToastContainerDirective.prototype.el;\n}\n\nexport class ToastContainerModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [ToastContainerDirective],\n  exports: [ToastContainerDirective],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ToastContainerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nToastContainerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nToastContainerModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { SafeHtml } from '@angular/platform-browser';\n\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\n\nimport { ComponentType } from '../portal/portal';\nimport { Toast } from './toast-component';\nimport { ToastRef } from './toast-injector';\n\n/**\n * Configuration for an individual toast.\n */\n export interface IndividualConfig {\n  /**\n  * toast time to live in milliseconds\n  * default: 5000\n  */\n  timeOut: number;\n  /**\n  * toast show close button\n  * default: false\n  */\n  closeButton: boolean;\n  /** time to close after a user hovers over toast */\n  /**\n   * show toast progress bar\n   * default: false\n   */\n  extendedTimeOut: number;\n  /**\n   * show toast progress bar\n   * default: false\n   */\n  progressBar: boolean;\n\n  /**\n   * changes toast progress bar animation\n   * default: decreasing\n   */\n  progressAnimation?: 'increasing' | 'decreasing';\n  /**\n   * render html in toast message (possibly unsafe)\n   * default: false\n   */\n  enableHtml: boolean;\n  /**\n   * css class on toast component\n   * default: toast\n   */\n  toastClass: string;\n  /**\n   * css class on toast container\n   * default: toast-top-right\n   */\n  positionClass: string;\n  /**\n   * css class on to toast title\n   * default: toast-title\n   */\n  titleClass: string;\n  /**\n   * css class on to toast title\n   * default: toast-title\n   */\n  messageClass: string;\n  /**\n   * clicking on toast dismisses it\n   * default: true\n   */\n  tapToDismiss: boolean;\n  /**\n   * Angular toast component to be shown\n   * default: Toast\n   */\n  toastComponent: ComponentType<any>;\n  /**\n   * Helps show toast from a websocket or from event outside Angular\n   * default: false\n   */\n  onActivateTick: boolean;\n}\n\nexport interface ToastrIconClasses {\n  error: string;\n  info: string;\n  success: string;\n  warning: string;\n}\n\n/**\n * Global Toast configuration\n * Includes all IndividualConfig\n */\nexport interface GlobalConfig extends IndividualConfig {\n  /**\n   * max toasts opened. Toasts will be queued\n   * Zero is unlimited\n   * default: 0\n   */\n  maxOpened: number;\n  /**\n   * dismiss current toast when max is reached\n   * default: false\n   */\n  autoDismiss: boolean;\n  iconClasses: Partial<ToastrIconClasses>;\n  /**\n   * New toast placement\n   * default: true\n   */\n  newestOnTop: boolean;\n  /**\n   * block duplicate messages\n   * default: false\n   */\n  preventDuplicates: boolean;\n}\n/**\n * Everything a toast needs to launch\n */\nexport class ToastPackage {\nprivate _onTap: Subject<any> = new Subject();\nprivate _onAction: Subject<any> = new Subject();\n/**\n * @param {?} toastId\n * @param {?} config\n * @param {?} message\n * @param {?} title\n * @param {?} toastType\n * @param {?} toastRef\n */\nconstructor(\npublic toastId: number,\npublic config: IndividualConfig,\npublic message: string | SafeHtml | null | undefined,\npublic title: string | undefined,\npublic toastType: string,\npublic toastRef: ToastRef<any>,\n  ) { }\n/**\n * Fired on click\n * @return {?}\n */\ntriggerTap() {\n    this._onTap.next();\n    this._onTap.complete();\n  }\n/**\n * @return {?}\n */\nonTap(): Observable<any> {\n    return this._onTap.asObservable();\n  }\n/**\n * available for use in custom toast\n * @param {?=} action\n * @return {?}\n */\ntriggerAction(action?: any) {\n    this._onAction.next(action);\n    this._onAction.complete();\n  }\n/**\n * @return {?}\n */\nonAction(): Observable<any> {\n    return this._onAction.asObservable();\n  }\n\n}\n\nfunction ToastPackage_tsickle_Closure_declarations() {\n/** @type {?} */\nToastPackage.prototype._onTap;\n/** @type {?} */\nToastPackage.prototype._onAction;\n/** @type {?} */\nToastPackage.prototype.toastId;\n/** @type {?} */\nToastPackage.prototype.config;\n/** @type {?} */\nToastPackage.prototype.message;\n/** @type {?} */\nToastPackage.prototype.title;\n/** @type {?} */\nToastPackage.prototype.toastType;\n/** @type {?} */\nToastPackage.prototype.toastRef;\n}\n\n\n/* tslint:disable:no-empty-interface */\nexport interface GlobalToastrConfig extends GlobalConfig {}\nexport interface IndividualToastrConfig extends IndividualConfig {}\nexport interface ToastrConfig extends IndividualConfig {}\n","import { GlobalConfig } from './toastr-config';\nimport { Toast } from './toast-component';\nexport class DefaultGlobalConfig implements GlobalConfig {\n  // Global\n  maxOpened = 0;\n  autoDismiss = false;\n  newestOnTop = true;\n  preventDuplicates = false;\n  iconClasses = {\n    error: 'toast-error',\n    info: 'toast-info',\n    success: 'toast-success',\n    warning: 'toast-warning',\n  };\n\n  // Individual\n  toastComponent = Toast;\n  closeButton = false;\n  timeOut = 5000;\n  extendedTimeOut = 1000;\n  enableHtml = false;\n  progressBar = false;\n  toastClass = 'toast';\n  positionClass = 'toast-top-right';\n  titleClass = 'toast-title';\n  messageClass = 'toast-message';\n  tapToDismiss = true;\n  onActivateTick = false;\n  progressAnimation: 'decreasing' | 'increasing' = 'decreasing';\n}\n\nfunction DefaultGlobalConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nDefaultGlobalConfig.prototype.maxOpened;\n/** @type {?} */\nDefaultGlobalConfig.prototype.autoDismiss;\n/** @type {?} */\nDefaultGlobalConfig.prototype.newestOnTop;\n/** @type {?} */\nDefaultGlobalConfig.prototype.preventDuplicates;\n/** @type {?} */\nDefaultGlobalConfig.prototype.iconClasses;\n/** @type {?} */\nDefaultGlobalConfig.prototype.toastComponent;\n/** @type {?} */\nDefaultGlobalConfig.prototype.closeButton;\n/** @type {?} */\nDefaultGlobalConfig.prototype.timeOut;\n/** @type {?} */\nDefaultGlobalConfig.prototype.extendedTimeOut;\n/** @type {?} */\nDefaultGlobalConfig.prototype.enableHtml;\n/** @type {?} */\nDefaultGlobalConfig.prototype.progressBar;\n/** @type {?} */\nDefaultGlobalConfig.prototype.toastClass;\n/** @type {?} */\nDefaultGlobalConfig.prototype.positionClass;\n/** @type {?} */\nDefaultGlobalConfig.prototype.titleClass;\n/** @type {?} */\nDefaultGlobalConfig.prototype.messageClass;\n/** @type {?} */\nDefaultGlobalConfig.prototype.tapToDismiss;\n/** @type {?} */\nDefaultGlobalConfig.prototype.onActivateTick;\n/** @type {?} */\nDefaultGlobalConfig.prototype.progressAnimation;\n}\n\n","import { Injector } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\n\nimport { OverlayRef } from '../overlay/overlay-ref';\nimport { ToastPackage } from './toastr-config';\n/**\n * Reference to a toast opened via the Toastr service.\n */\nexport class ToastRef<T> {\n/**\n * The instance of component opened into the toast.\n */\ncomponentInstance: T;\n/**\n * Subject for notifying the user that the toast has finished closing.\n */\nprivate _afterClosed: Subject<any> = new Subject();\nprivate _activate: Subject<any> = new Subject();\nprivate _manualClose: Subject<any> = new Subject();\n/**\n * @param {?} _overlayRef\n */\nconstructor(private _overlayRef: OverlayRef) { }\n/**\n * @return {?}\n */\nmanualClose() {\n    this._manualClose.next();\n    this._manualClose.complete();\n  }\n/**\n * @return {?}\n */\nmanualClosed(): Observable<any> {\n    return this._manualClose.asObservable();\n  }\n/**\n * Close the toast.\n * @return {?}\n */\nclose(): void {\n    this._overlayRef.detach();\n    this._afterClosed.next();\n    this._afterClosed.complete();\n  }\n/**\n * Gets an observable that is notified when the toast is finished closing.\n * @return {?}\n */\nafterClosed(): Observable<any> {\n    return this._afterClosed.asObservable();\n  }\n/**\n * @return {?}\n */\nisInactive() {\n    return this._activate.isStopped;\n  }\n/**\n * @return {?}\n */\nactivate() {\n    this._activate.next();\n    this._activate.complete();\n  }\n/**\n * Gets an observable that is notified when the toast has started opening.\n * @return {?}\n */\nafterActivate(): Observable<any> {\n    return this._activate.asObservable();\n  }\n}\n\nfunction ToastRef_tsickle_Closure_declarations() {\n/**\n * The instance of component opened into the toast.\n * @type {?}\n */\nToastRef.prototype.componentInstance;\n/**\n * Subject for notifying the user that the toast has finished closing.\n * @type {?}\n */\nToastRef.prototype._afterClosed;\n/** @type {?} */\nToastRef.prototype._activate;\n/** @type {?} */\nToastRef.prototype._manualClose;\n/** @type {?} */\nToastRef.prototype._overlayRef;\n}\n\n/**\n * Custom injector type specifically for instantiating components with a toast.\n */\nexport class ToastInjector implements Injector {\n/**\n * @param {?} _toastPackage\n * @param {?} _parentInjector\n */\nconstructor(\nprivate _toastPackage: ToastPackage,\nprivate _parentInjector: Injector) { }\n/**\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget(token: any, notFoundValue?: any): any {\n    if (token === ToastPackage && this._toastPackage) {\n      return this._toastPackage;\n    }\n    return this._parentInjector.get(token, notFoundValue);\n  }\n}\n\nfunction ToastInjector_tsickle_Closure_declarations() {\n/** @type {?} */\nToastInjector.prototype._toastPackage;\n/** @type {?} */\nToastInjector.prototype._parentInjector;\n}\n\n","import { InjectionToken } from '@angular/core';\n\nimport { GlobalConfig } from './toastr-config';\n\nexport const /** @type {?} */ TOAST_CONFIG = new InjectionToken<GlobalConfig>('ToastConfig');\n","import {\n  ComponentRef,\n  Inject,\n  Injectable,\n  Injector,\n  SecurityContext,\n} from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { Observable } from 'rxjs/Observable';\n\n\nimport { Overlay } from '../overlay/overlay';\nimport { ComponentPortal } from '../portal/portal';\nimport { DefaultGlobalConfig } from './default-config';\nimport { ToastContainerDirective } from './toast-directive';\nimport { ToastRef, ToastInjector } from './toast-injector';\nimport { TOAST_CONFIG } from './toast-token';\nimport {\n  GlobalConfig,\n  IndividualConfig,\n  ToastrIconClasses,\n  ToastPackage,\n} from './toastr-config';\n\n\nexport interface ActiveToast {\n  toastId?: number;\n  message?: string;\n  portal?: ComponentRef<any>;\n  toastRef: ToastRef<any>;\n  onShown?: Observable<any>;\n  onHidden?: Observable<any>;\n  onTap?: Observable<any>;\n  onAction?: Observable<any>;\n}\nexport class ToastrService {\n  toastrConfig: GlobalConfig;\nprivate index = 0;\nprivate previousToastMessage?: string;\n  currentlyActive = 0;\n  toasts: ActiveToast[] = [];\n  overlayContainer: ToastContainerDirective;\n/**\n * @param {?} toastrConfig\n * @param {?} overlay\n * @param {?} _injector\n * @param {?} sanitizer\n */\nconstructor(\n     toastrConfig: GlobalConfig,\nprivate overlay: Overlay,\nprivate _injector: Injector,\nprivate sanitizer: DomSanitizer,\n  ) {\n    const defaultConfig = new DefaultGlobalConfig;\n    this.toastrConfig = { ...defaultConfig, ...toastrConfig };\n    this.toastrConfig.iconClasses = { ...defaultConfig.iconClasses, ...toastrConfig.iconClasses };\n  }\n/**\n * show toast\n * @param {?=} message\n * @param {?=} title\n * @param {?=} override\n * @param {?=} type\n * @return {?}\n */\nshow(message?: string, title?: string, override: Partial<IndividualConfig> = {}, type = '') {\n    return this._buildNotification(type, message, title, this.applyConfig(override));\n  }\n/**\n * show successful toast\n * @param {?=} message\n * @param {?=} title\n * @param {?=} override\n * @return {?}\n */\nsuccess(message?: string, title?: string, override: Partial<IndividualConfig> = {}) {\n    const /** @type {?} */ type = /** @type {?} */(( this.toastrConfig.iconClasses)).success || '';\n    return this._buildNotification(type, message, title, this.applyConfig(override));\n  }\n/**\n * show error toast\n * @param {?=} message\n * @param {?=} title\n * @param {?=} override\n * @return {?}\n */\nerror(message?: string, title?: string, override: Partial<IndividualConfig> = {}) {\n    const /** @type {?} */ type = /** @type {?} */(( this.toastrConfig.iconClasses)).error || '';\n    return this._buildNotification(type, message, title, this.applyConfig(override));\n  }\n/**\n * show info toast\n * @param {?=} message\n * @param {?=} title\n * @param {?=} override\n * @return {?}\n */\ninfo(message?: string, title?: string, override: Partial<IndividualConfig> = {}) {\n    const /** @type {?} */ type = /** @type {?} */(( this.toastrConfig.iconClasses)).info || '';\n    return this._buildNotification(type, message, title, this.applyConfig(override));\n  }\n/**\n * show warning toast\n * @param {?=} message\n * @param {?=} title\n * @param {?=} override\n * @return {?}\n */\nwarning(message?: string, title?: string, override: Partial<IndividualConfig> = {}) {\n    const /** @type {?} */ type = /** @type {?} */(( this.toastrConfig.iconClasses)).warning || '';\n    return this._buildNotification(type, message, title, this.applyConfig(override));\n  }\n/**\n * Remove all or a single toast by id\n * @param {?=} toastId\n * @return {?}\n */\nclear(toastId?: number) {\n    // Call every toastRef manualClose function\n    for (const /** @type {?} */ toast of this.toasts) {\n      if (toastId !== undefined) {\n        if (toast.toastId === toastId) {\n          toast.toastRef.manualClose();\n          return;\n        }\n      } else {\n        toast.toastRef.manualClose();\n      }\n    }\n  }\n/**\n * Remove and destroy a single toast by id\n * @param {?} toastId\n * @return {?}\n */\nremove(toastId: number) {\n    const /** @type {?} */ found = this._findToast(toastId);\n    if (!found) {\n      return false;\n    }\n    found.activeToast.toastRef.close();\n    this.toasts.splice(found.index, 1);\n    this.currentlyActive = this.currentlyActive - 1;\n    if (!this.toastrConfig.maxOpened || !this.toasts.length) {\n      return false;\n    }\n    if (this.currentlyActive <= +this.toastrConfig.maxOpened && this.toasts[this.currentlyActive]) {\n      const /** @type {?} */ p = this.toasts[this.currentlyActive].toastRef;\n      if (!p.isInactive()) {\n        this.currentlyActive = this.currentlyActive + 1;\n        p.activate();\n      }\n    }\n    return true;\n  }\n/**\n * Determines if toast message is already shown\n * @param {?} message\n * @return {?}\n */\nisDuplicate(message: string) {\n    for (let /** @type {?} */ i = 0; i < this.toasts.length; i++) {\n      if (this.toasts[i].message === message) {\n        return true;\n      }\n    }\n    return false;\n  }\n/**\n * create a clone of global config and apply individual settings\n * @param {?=} override\n * @return {?}\n */\nprivate applyConfig(override: Partial<IndividualConfig> = {}): GlobalConfig {\n    return { ...this.toastrConfig, ...override };\n  }\n/**\n * Find toast object by id\n * @param {?} toastId\n * @return {?}\n */\nprivate _findToast(toastId: number): { index: number, activeToast: ActiveToast } | null {\n    for (let /** @type {?} */ i = 0; i < this.toasts.length; i++) {\n      if (this.toasts[i].toastId === toastId) {\n        return { index: i, activeToast: this.toasts[i] };\n      }\n    }\n    return null;\n  }\n/**\n * Creates and attaches toast data to component\n * returns null if toast is duplicate and preventDuplicates == True\n * @param {?} toastType\n * @param {?} message\n * @param {?} title\n * @param {?} config\n * @return {?}\n */\nprivate _buildNotification(\n    toastType: string,\n    message: string | undefined,\n    title: string | undefined,\n    config: GlobalConfig,\n  ): ActiveToast | null {\n    if (!config.toastComponent) {\n      throw new Error('toastComponent required');\n    }\n    // max opened and auto dismiss = true\n    if (message && this.toastrConfig.preventDuplicates && this.isDuplicate(message)) {\n      return null;\n    }\n    this.previousToastMessage = message;\n    let /** @type {?} */ keepInactive = false;\n    if (this.toastrConfig.maxOpened && this.currentlyActive >= this.toastrConfig.maxOpened) {\n      keepInactive = true;\n      if (this.toastrConfig.autoDismiss) {\n        this.clear(this.toasts[this.toasts.length - 1].toastId);\n      }\n    }\n    const /** @type {?} */ overlayRef = this.overlay.create(config.positionClass, this.overlayContainer);\n    this.index = this.index + 1;\n    let /** @type {?} */ sanitizedMessage: string | SafeHtml | undefined | null = message;\n    if (message && config.enableHtml) {\n      sanitizedMessage = this.sanitizer.sanitize(SecurityContext.HTML, message);\n    }\n    const /** @type {?} */ toastRef = new ToastRef(overlayRef);\n    const /** @type {?} */ toastPackage = new ToastPackage(\n      this.index,\n      config,\n      sanitizedMessage,\n      title,\n      toastType,\n      toastRef,\n    );\n    const /** @type {?} */ ins: ActiveToast = {\n      toastId: this.index,\n      message,\n      toastRef,\n      onShown: toastRef.afterActivate(),\n      onHidden: toastRef.afterClosed(),\n      onTap: toastPackage.onTap(),\n      onAction: toastPackage.onAction(),\n    };\n    const /** @type {?} */ toastInjector = new ToastInjector(toastPackage, this._injector);\n    const /** @type {?} */ component = new ComponentPortal(config.toastComponent, toastInjector);\n    ins.portal = overlayRef.attach(component, this.toastrConfig.newestOnTop);\n    if (!keepInactive) {\n      setTimeout(() => {\n        ins.toastRef.activate();\n        this.currentlyActive = this.currentlyActive + 1;\n      });\n    }\n    this.toasts.push(ins);\n    return ins;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [TOAST_CONFIG, ] }, ]},\n{type: Overlay, },\n{type: Injector, },\n{type: DomSanitizer, },\n];\n}\n\nfunction ToastrService_tsickle_Closure_declarations() {\n/** @type {?} */\nToastrService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nToastrService.ctorParameters;\n/** @type {?} */\nToastrService.prototype.toastrConfig;\n/** @type {?} */\nToastrService.prototype.index;\n/** @type {?} */\nToastrService.prototype.previousToastMessage;\n/** @type {?} */\nToastrService.prototype.currentlyActive;\n/** @type {?} */\nToastrService.prototype.toasts;\n/** @type {?} */\nToastrService.prototype.overlayContainer;\n/** @type {?} */\nToastrService.prototype.overlay;\n/** @type {?} */\nToastrService.prototype._injector;\n/** @type {?} */\nToastrService.prototype.sanitizer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  OnDestroy,\n  HostBinding,\n  HostListener,\n  ApplicationRef,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  transition,\n  animate,\n  style,\n} from '@angular/animations';\nimport { SafeHtml } from '@angular/platform-browser';\n\nimport { Subscription } from 'rxjs/Subscription';\nimport { Subject } from 'rxjs/Subject';\n\nimport { ToastPackage, IndividualConfig } from './toastr-config';\nimport { ToastrService } from './toastr-service';\nimport { ToastRef } from './toast-injector';\nexport class Toast implements OnDestroy {\n  message?: string | SafeHtml | null;\n  title?: string;\n  options: IndividualConfig;\n/**\n * width of progress bar\n */\nwidth = -1;\n/**\n * a combination of toast type and options.toastClass\n */\ntoastClasses = '';\n/**\n * controls animation\n */\nstate = 'inactive';\nprivate timeout: any;\nprivate intervalId: any;\nprivate hideTime: number;\nprivate sub: Subscription;\nprivate sub1: Subscription;\n/**\n * @param {?} toastrService\n * @param {?} toastPackage\n * @param {?} appRef\n */\nconstructor(\n    protected toastrService: ToastrService,\npublic toastPackage: ToastPackage,\n    protected appRef: ApplicationRef,\n  ) {\n    this.message = toastPackage.message;\n    this.title = toastPackage.title;\n    this.options = toastPackage.config;\n    this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n    this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n      this.activateToast();\n    });\n    this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n      this.remove();\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.sub.unsubscribe();\n    this.sub1.unsubscribe();\n    clearInterval(this.intervalId);\n    clearTimeout(this.timeout);\n  }\n/**\n * activates toast and sets timeout\n * @return {?}\n */\nactivateToast() {\n    this.state = 'active';\n    if (this.options.timeOut) {\n      this.timeout = setTimeout(() => {\n        this.remove();\n      }, this.options.timeOut);\n      this.hideTime = new Date().getTime() + this.options.timeOut;\n      if (this.options.progressBar) {\n        this.intervalId = setInterval(() => this.updateProgress(), 10);\n      }\n    }\n    if (this.options.onActivateTick) {\n      this.appRef.tick();\n    }\n  }\n/**\n * updates progress bar width\n * @return {?}\n */\nupdateProgress() {\n    if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n      return;\n    }\n    const /** @type {?} */ now = new Date().getTime();\n    const /** @type {?} */ remaining = this.hideTime - now;\n    this.width = (remaining / this.options.timeOut) * 100;\n    if (this.options.progressAnimation === 'increasing') {\n      this.width = 100 - this.width;\n    }\n    if (this.width <= 0) {\n      this.width = 0;\n    }\n    if (this.width >= 100) {\n      this.width = 100;\n    }\n  }\n/**\n * tells toastrService to remove this toast after animation time\n * @return {?}\n */\nremove() {\n    if (this.state === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.state = 'removed';\n    this.timeout = setTimeout(() =>\n      this.toastrService.remove(this.toastPackage.toastId),\n      300,\n    );\n  }\n/**\n * @return {?}\n */\ntapToast() {\n    if (this.state === 'removed') {\n      return;\n    }\n    this.toastPackage.triggerTap();\n    if (this.options.tapToDismiss) {\n      this.remove();\n    }\n  }\n/**\n * @return {?}\n */\nstickAround() {\n    if (this.state === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.options.timeOut = 0;\n    this.hideTime = 0;\n\n    // disable progressBar\n    clearInterval(this.intervalId);\n    this.width = 0;\n  }\n/**\n * @return {?}\n */\ndelayedHideToast() {\n    if (this.options.extendedTimeOut === 0 || this.state === 'removed') {\n      return;\n    }\n    this.timeout = setTimeout(() => this.remove(), this.options.extendedTimeOut);\n    this.options.timeOut = this.options.extendedTimeOut;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = 100;\n    if (this.options.progressBar) {\n      this.intervalId = setInterval(() => this.updateProgress(), 10);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: '[toast-component]',\n  template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" class=\"toast-close-button\">\n    &times;\n  </button>\n  <div *ngIf=\"title\" class=\"{{options.titleClass}}\" [attr.aria-label]=\"title\">\n    {{title}}\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" class=\"{{options.messageClass}}\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" class=\"{{options.messageClass}}\" [attr.aria-label]=\"message\">\n    {{message}}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width.%]=\"width\"></div>\n  </div>\n  `,\n  animations: [\n    trigger('flyInOut', [\n      state('inactive', style({\n        display: 'none',\n        opacity: 0\n      })),\n      state('active', style({ opacity: 1 })),\n      state('removed', style({ opacity: 0 })),\n      transition('inactive => active', animate('300ms ease-in')),\n      transition('active => removed', animate('300ms ease-in')),\n    ]),\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ToastrService, },\n{type: ToastPackage, },\n{type: ApplicationRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'toastClasses': [{ type: HostBinding, args: ['class', ] },],\n'state': [{ type: HostBinding, args: ['@flyInOut', ] },],\n'tapToast': [{ type: HostListener, args: ['click', ] },],\n'stickAround': [{ type: HostListener, args: ['mouseenter', ] },],\n'delayedHideToast': [{ type: HostListener, args: ['mouseleave', ] },],\n};\n}\n\nfunction Toast_tsickle_Closure_declarations() {\n/** @type {?} */\nToast.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nToast.ctorParameters;\n/** @type {?} */\nToast.propDecorators;\n/** @type {?} */\nToast.prototype.message;\n/** @type {?} */\nToast.prototype.title;\n/** @type {?} */\nToast.prototype.options;\n/**\n * width of progress bar\n * @type {?}\n */\nToast.prototype.width;\n/**\n * a combination of toast type and options.toastClass\n * @type {?}\n */\nToast.prototype.toastClasses;\n/**\n * controls animation\n * @type {?}\n */\nToast.prototype.state;\n/** @type {?} */\nToast.prototype.timeout;\n/** @type {?} */\nToast.prototype.intervalId;\n/** @type {?} */\nToast.prototype.hideTime;\n/** @type {?} */\nToast.prototype.sub;\n/** @type {?} */\nToast.prototype.sub1;\n/** @type {?} */\nToast.prototype.toastrService;\n/** @type {?} */\nToast.prototype.toastPackage;\n/** @type {?} */\nToast.prototype.appRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  NgModule,\n  ModuleWithProviders,\n  SkipSelf,\n  Optional,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { Toast } from './toast-component';\nimport { TOAST_CONFIG } from './toast-token';\nimport { ToastrService } from './toastr-service';\nimport { GlobalConfig } from './toastr-config';\nimport { OverlayContainer } from '../overlay/overlay-container';\nimport { Overlay } from '../overlay/overlay';\nexport class ToastrModule {\n/**\n * @param {?} parentModule\n */\nconstructor(  parentModule: ToastrModule) {\n    if (parentModule) {\n      throw new Error('ToastrModule is already loaded. It should only be imported in your application\\'s main module.');\n    }\n  }\n/**\n * @param {?=} config\n * @return {?}\n */\nstatic forRoot(config: Partial<GlobalConfig> = {}): ModuleWithProviders {\n    return {\n      ngModule: ToastrModule,\n      providers: [\n        { provide: TOAST_CONFIG, useValue: config },\n        OverlayContainer,\n        Overlay,\n        ToastrService,\n      ]\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule],\n  exports: [Toast],\n  declarations: [Toast],\n  entryComponents: [Toast],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ToastrModule, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction ToastrModule_tsickle_Closure_declarations() {\n/** @type {?} */\nToastrModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nToastrModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {ComponentType,ComponentPortal,BasePortalHost,Overlay,OVERLAY_PROVIDERS,OverlayContainer,OverlayRef,ToastContainerDirective,ToastContainerModule,Toast,ActiveToast,ToastrService,IndividualConfig,ToastrIconClasses,GlobalConfig,ToastPackage,GlobalToastrConfig,IndividualToastrConfig,ToastrConfig,ToastrModule,ToastRef,ToastInjector,TOAST_CONFIG} from './public_api';\n"],"names":["Subject"],"mappings":"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"}