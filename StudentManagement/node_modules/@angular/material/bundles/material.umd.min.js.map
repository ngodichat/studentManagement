{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/list/list.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/style/apply-transform.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {DOWN_ARROW, END, ENTER, HOME, SPACE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {map} from 'rxjs/operators/map';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {\n  CanDisable,\n  ErrorStateMatcher,\n  CanUpdateErrorState,\n  mixinErrorState,\n  HasTabIndex,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form.  */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** View -> model callback called when value changes */\n  _onChange: (value: any) => void = () => {};\n\n  /** View -> model callback called when select has been touched */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder() { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required() { return this._required; }\n  set required(value: any) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value() { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id() { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select has been opened. */\n   @Output() openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   /** Event emitted when the select has been opened. */\n   @Output('opened')\n   get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /**\n   * Event emitted when the select has been opened.\n   * @deprecated Use `openedChange` instead.\n   */\n  @Output() onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the select has been closed.\n   * @deprecated Use `openedChange` instead.\n   */\n  @Output() onClose: Observable<void> = this._closedStream;\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() selectionChange: EventEmitter<MatSelectChange> = new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event emitted when the selected value has been changed by the user.\n   * @deprecated Use `selectionChange` instead.\n   */\n  @Output() change: EventEmitter<MatSelectChange> = this.selectionChange;\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() valueChange = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(this.options.toArray().indexOf(correspondingOption));\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withTypeAhead();\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(this._getOptionIndex(option)!);\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._getOptionIndex(this._selectionModel.selected[0])!);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const itemHeight = this._getItemHeight();\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.options, this.optionGroups);\n    const scrollOffset = (activeOptionIndex + labelCount) * itemHeight;\n    const panelTop = this.panel.nativeElement.scrollTop;\n\n    if (scrollOffset < panelTop) {\n      this.panel.nativeElement.scrollTop = scrollOffset;\n    } else if (scrollOffset + itemHeight > panelTop + SELECT_PANEL_MAX_HEIGHT) {\n      this.panel.nativeElement.scrollTop =\n          Math.max(0, scrollOffset - SELECT_PANEL_MAX_HEIGHT + itemHeight);\n    }\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += MatOption.countGroupLabelsBeforeOption(selectedOptionOffset,\n        this.options, this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  ConnectionPositionPair,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConfig,\n  OverlayConnectionPosition,\n  OverlayRef,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {merge} from 'rxjs/observable/merge';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options');\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n      // the tooltip.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** @deprecated */\n  @Input('tooltip-position')\n  get _positionDeprecated(): TooltipPosition { return this._position; }\n  set _positionDeprecated(value: TooltipPosition) { this._position = value; }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay =\n      this._defaultOptions ? this._defaultOptions.showDelay : 0;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay =\n      this._defaultOptions ? this._defaultOptions.hideDelay : 0;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions?: MatTooltipDefaultOptions) {\n\n    // TODO(crisbeto): make the `_defaultOptions` a required param next time we do breaking changes.\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._tooltipInstance) {\n      this._disposeTooltip();\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) => {\n        this._elementRef.nativeElement.removeEventListener(event, listener);\n      });\n\n      this._manualListeners.clear();\n    }\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    if (!this._tooltipInstance) {\n      this._createTooltip();\n    }\n\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions ? this._defaultOptions.touchendHideDelay : 1500);\n  }\n\n  /** Create the tooltip to display */\n  private _createTooltip(): void {\n    const overlayRef = this._createOverlay();\n    const portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n\n    this._tooltipInstance = overlayRef.attach(portal).instance;\n\n    // Dispose of the tooltip when the overlay is detached.\n    merge(this._tooltipInstance!.afterHidden(), overlayRef.detachments()).subscribe(() => {\n      // Check first if the tooltip has already been removed through this components destroy.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    });\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay\n      .position()\n      .connectedTo(this._elementRef, origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.onPositionChange.subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        } else {\n          // Otherwise recalculate the origin based on the new position.\n          this._tooltipInstance._setTransformOrigin(change.connectionPair);\n        }\n      }\n    });\n\n    const config = new OverlayConfig({\n      direction: this._dir ? this._dir.value : 'ltr',\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef = this._overlay.create(config);\n\n    return this._overlayRef;\n  }\n\n  /** Disposes the current tooltip and the overlay it is attached to */\n  private _disposeTooltip(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. 'below' -> 'above').\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OriginConnectionPosition;\n\n    if (this.position == 'above' || this.position == 'below') {\n      position = {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isDirectionLtr ||\n               this.position == 'after' && !isDirectionLtr) {\n      position = {originX: 'start', originY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isDirectionLtr ||\n               this.position == 'before' && !isDirectionLtr) {\n      position = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.originX, position.originY);\n\n    return {\n      main: position,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OverlayConnectionPosition;\n\n    if (this.position == 'above') {\n      position = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (this.position == 'below') {\n      position = {overlayX: 'center', overlayY: 'top'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isLtr ||\n               this.position == 'after' && !isLtr) {\n      position = {overlayX: 'end', overlayY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isLtr ||\n               this.position == 'before' && !isLtr) {\n      position = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.overlayX, position.overlayY);\n\n    return {\n      main: position,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private _onHide: Subject<any> = new Subject();\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = 'left';\n    } else if (position === 'end') {\n      this._transformOrigin = 'right';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      // Note: as of Angular 4.3, the animations module seems to fire the `start` callback before\n      // the end if animations are disabled. Make this call async to ensure that it still fires\n      // at the appropriate time.\n      Promise.resolve().then(() => this._closeOnInteraction = true);\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matTabsAnimations} from './tabs-animations';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** A subscription to events for when the tab body begins centering. */\n  private _centeringSub: Subscription;\n  /** A subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub: Subscription;\n\n  constructor(\n    _componentFactoryResolver: ComponentFactoryResolver,\n    _viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(_componentFactoryResolver, _viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    if (this._host._isCenterPosition(this._host._position)) {\n      this.attach(this._host._content);\n    }\n    this._centeringSub = this._host._beforeCentering.subscribe((isCentering: boolean) => {\n      if (isCentering) {\n        if (!this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      }\n    });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    if (this._centeringSub && !this._centeringSub.closed) {\n      this._centeringSub.unsubscribe();\n    }\n\n    if (this._leavingSub && !this._leavingSub.closed) {\n      this._leavingSub.unsubscribe();\n    }\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  _position: MatTabBodyPositionState;\n  @Input('position') set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  _origin: MatTabBodyOriginState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input('origin') set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {merge} from 'rxjs/observable/merge';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** @deprecated */\n  @Input('mat-dynamic-height')\n  get _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n  set _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\n\n  /** The index of the active tab. */\n  @Input()\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() selectedIndexChange: EventEmitter<number> = new EventEmitter();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() focusChange: EventEmitter<MatTabChangeEvent> = new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  /**\n   * Event emitted when the tab selection has changed.\n   * @deprecated Use `selectedTabChange` instead.\n   */\n  @Output() selectChange: EventEmitter<MatTabChangeEvent> = this.selectedTabChange;\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked(): void {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n  get scrollDistance(): number { return this._scrollDistance; }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  private _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinColor(MatTabNavBase, 'primary');\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether ripples should be disabled for all links or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /** Notifies the component that the active link has been changed. */\n  updateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10)).pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n\n    this._setLinkDisableRipple();\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n\n  /** Sets the `disableRipple` property on each link of the navigation bar. */\n  private _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  private _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  private _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {speedFactor: globalOptions.baseSpeedFactor};\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    ScrollDispatchModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(elementRef: ElementRef, private _platform: Platform) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== Node.COMMENT_NODE)\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('5.1.1');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW, TAB} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {tap} from 'rxjs/operators/tap';\nimport {delay} from 'rxjs/operators/delay';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MatOption, MatOptionSelectionChange} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {DOCUMENT} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _panelOpen: boolean = false;\n  private _componentDestroyed = false;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: ConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Stream of keyboard events that can close the panel. */\n  private _closeKeyEventStream = new Subject<void>();\n\n  /** View -> model callback called when value changes */\n  _onChange: (value: any) => void = () => {};\n\n  /** View -> model callback called when autocomplete has been touched */\n  _onTouched = () => {};\n\n  /* The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any) {}\n\n  ngOnDestroy() {\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /* Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (this._panelOpen) {\n      this.autocomplete._isOpen = this._panelOpen = false;\n\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n        this._closingActionsSubscription.unsubscribe();\n      }\n\n      // Note that in some cases this can end up being called after the component is destroyed.\n      // Add a check to ensure that we don't try to run change detection on a destroyed view.\n      if (!this._componentDestroyed) {\n        // We need to trigger change detection manually, because\n        // `fromEvent` doesn't seem to do it at the proper time.\n        // This ensures that the label is reset when the\n        // user clicks outside.\n        this._changeDetectorRef.detectChanges();\n      }\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._panelOpen)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._panelOpen)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._panelOpen &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  /**\n   * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the input. Implemented as a part of `ControlValueAccessor`.\n   * @param isDisabled Whether the component should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._canOpen() && document.activeElement === event.target) {\n      this._onChange((event.target as HTMLInputElement).value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const activeOptionIndex = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n    const optionOffset = (activeOptionIndex + labelCount) * AUTOCOMPLETE_OPTION_HEIGHT;\n    const panelTop = this.autocomplete._getScrollTop();\n\n    if (optionOffset < panelTop) {\n      // Scroll up to reveal selected option scrolled above the panel top\n      this.autocomplete._setScrollTop(optionOffset);\n    } else if (optionOffset + AUTOCOMPLETE_OPTION_HEIGHT > panelTop + AUTOCOMPLETE_PANEL_HEIGHT) {\n      // Scroll down to reveal selected option scrolled below the panel bottom\n      const newScrollTop = optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT;\n      this.autocomplete._setScrollTop(Math.max(0, newScrollTop));\n    }\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.recalculateLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n   /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._panelOpen = true;\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy =  this._overlay.position().connectedTo(\n        this._getConnectedElement(),\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField._connectionContainerRef : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /** Reset active item to -1 so arrow events will activate the correct options.*/\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(-1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\n/** Fade-in duration for the ripples. Can be modified with the speedFactor option. */\nexport const RIPPLE_FADE_IN_DURATION = 450;\n\n/** Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor. */\nexport const RIPPLE_FADE_OUT_DURATION = 400;\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst IGNORE_MOUSE_EVENTS_TIMEOUT = 800;\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  speedFactor?: number;\n  persistent?: boolean;\n};\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerElement.getBoundingClientRect();\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const duration = RIPPLE_FADE_IN_DURATION / (config.speedFactor || 1);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n\n    rippleEl.style.transitionDuration = `${RIPPLE_FADE_OUT_DURATION}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, RIPPLE_FADE_OUT_DURATION);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + IGNORE_MOUSE_EVENTS_TIMEOUT;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are completely visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {take} from 'rxjs/operators/take';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig): MatSnackBarRef<T> {\n    const _config = _applyConfigDefaults(config);\n    const snackBarRef = this._attach(component, _config);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (_config.duration && _config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(_config!.duration!));\n    }\n\n    if (_config.announcementMessage) {\n      this._live.announce(_config.announcementMessage, _config.politeness);\n    }\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = _applyConfigDefaults(config);\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component as the content of the snack bar container.\n   */\n  private _attach<T>(component: ComponentType<T>, config: MatSnackBarConfig): MatSnackBarRef<T> {\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T>(container, overlayRef);\n    const injector = this._createInjector(config, snackBarRef);\n    const portal = new ComponentPortal(component, undefined, injector);\n    const contentRef = container.attachComponentPortal(portal);\n\n    // We can't pass this via the injector, because the injector is created earlier.\n    snackBarRef.instance = contentRef.instance;\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    return snackBarRef;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatSnackBarConfig): MatSnackBarConfig {\n  return {...new MatSnackBarConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LIVE_ANNOUNCER_PROVIDER} from '@angular/cdk/a11y';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatCommonModule,\n    LayoutModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar, LIVE_ANNOUNCER_PROVIDER]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  Output,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortInvalidDirectionError,\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError\n} from './sort-errors';\nimport {Subject} from 'rxjs/Subject';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinDisabled(MatSortBase);\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase implements CanDisable, OnChanges, OnDestroy {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  get direction(): SortDirection { return this._direction; }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear() { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable) {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable) {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable) {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.next({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {SortDirection} from './sort-direction';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable()\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n\n  /** A label to describe the current sort (visible only to screenreaders). */\n  sortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly indicatorToggle: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('desc', style({transform: 'translateY(10px)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('asc', style({transform: 'rotate(-45deg)'})),\n    state('desc', style({transform: 'rotate(45deg)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('asc', style({transform: 'rotate(45deg)'})),\n    state('desc', style({transform: 'rotate(-45deg)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that moves the indicator in and out of view when sorting is enabled/disabled. */\n  indicatorToggle: trigger('indicatorToggle', [\n    transition('void => asc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'translateY(25%)', opacity: 0}),\n      style({transform: 'none', opacity: 1})\n    ]))),\n    transition('asc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'none', opacity: 1}),\n      style({transform: 'translateY(-25%)', opacity: 0})\n    ]))),\n    transition('void => desc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'translateY(-25%)', opacity: 0}),\n      style({transform: 'none', opacity: 1})\n    ]))),\n    transition('desc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'none', opacity: 1}),\n      style({transform: 'translateY(25%)', opacity: 0})\n    ]))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatSort, MatSortable} from './sort';\nimport {MatSortHeaderIntl} from './sort-header-intl';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {matSortAnimations} from './sort-animations';\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '[class.mat-sort-header-sorted]': '_isSorted()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.indicatorToggle\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input('start') start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n      .subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /** Handles click events on the header. */\n  _handleClick() {\n    if (!this._isDisabled()) {\n      this._sort.sort(this);\n    }\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable()\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** Icon for the given step. */\n  @Input() icon: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Index of the given step. */\n  @Input()\n  get index() { return this._index; }\n  set index(value: any) {\n    this._index = coerceNumberProperty(value);\n  }\n  private _index: number;\n\n  /** Whether the given step is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(value: any) {\n    this._selected = coerceBooleanProperty(value);\n  }\n  private _selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input()\n  get active() { return this._active; }\n  set active(value: any) {\n    this._active = coerceBooleanProperty(value);\n  }\n  private _active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input()\n  get optional() { return this._optional; }\n  set optional(value: any) {\n    this._optional = coerceBooleanProperty(value);\n  }\n  private _optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  QueryList,\n  SkipSelf,\n  ViewChildren,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  Optional,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {matStepperAnimations} from './stepper-animations';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by <ng-template matStepLabel>. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader, {read: ElementRef}) _stepHeader: QueryList<ElementRef>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  ngAfterContentInit() {\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {'(click)': '_stepper.next()'},\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext { }\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {'(click)': '_stepper.previous()'},\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCommonModule, MatRippleModule, ErrorStateMatcher} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    A11yModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader\n  ],\n  declarations: [MatHorizontalStepper, MatVerticalStepper, MatStep, MatStepLabel, MatStepper,\n    MatStepperNext, MatStepperPrevious, MatStepHeader],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  preserveWhitespaces: false,\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  preserveWhitespaces: false,\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MatCell, MatCellDef, MatColumnDef, MatHeaderCell, MatHeaderCellDef} from './cell';\nimport {MatHeaderRow, MatHeaderRowDef, MatRow, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n  declarations: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DataSource} from '@angular/cdk/table';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort} from '@angular/material/sort';\nimport {Subscription} from 'rxjs/Subscription';\nimport {combineLatest} from 'rxjs/operators/combineLatest';\nimport {map} from 'rxjs/operators/map';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {empty} from 'rxjs/observable/empty';\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> implements DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  set data(data: T[]) { this._data.next(data); }\n  get data() { return this._data.value; }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  set filter(filter: string) { this._filter.next(filter); }\n  get filter(): string { return this._filter.value; }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  get sort(): MatSort|null { return this._sort; }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  get paginator(): MatPaginator|null { return this._paginator; }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n\n    // If the value is a string and only whitespace, return the value.\n    // Otherwise +value will convert it to 0.\n    if (typeof value === 'string' && !value.trim()) {\n      return value;\n    }\n\n    return isNaN(+value) ? value : +value;\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overriden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // Otherwise, use an empty observable stream to take their place.\n    const sortChange = this._sort ? this._sort.sortChange : empty();\n    const pageChange = this._paginator ? this._paginator.page : empty();\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    // Watch for base data or filter changes to provide a filtered set of data.\n    this._renderChangesSubscription = this._data.pipe(\n      combineLatest(this._filter),\n      map(([data]) => this._filterData(data)),\n      // Watch for filtered data or sort changes to provide an ordered set of data.\n      combineLatest(sortChange.pipe(startWith(null!))),\n      map(([data]) => this._orderData(data)),\n      // Watch for ordered data or page changes to provide a paged set of data.\n      combineLatest(pageChange.pipe(startWith(null!))),\n      map(([data]) => this._pageData(data))\n    )\n    // Watched for paged data changes and send the result to the table to render.\n    .subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overriden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort || !this.sort.active || this.sort.direction == '') { return data; }\n\n    const active = this.sort.active;\n    const direction = this.sort.direction;\n\n    return data.slice().sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n      return (valueA < valueB ? -1 : 1) * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\n\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone) {}\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = element ? (element.offsetLeft || 0) + 'px' : '0';\n    inkBar.style.width = element ? (element.offsetWidth || 0) + 'px' : '0';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by <ng-template mat-tab-label>. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /** Template inside the MatTab view that contains an <ng-content>. */\n  @ViewChild(TemplateRef) _content: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  applyCssTransform,\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _slideRenderer: SlideToggleRenderer;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() change: EventEmitter<MatSlideToggleChange> = new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 23, speedFactor: 1.5};\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._slideRenderer.dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus() {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle() {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  /** Reference to the thumb HTMLElement. */\n  private _thumbEl: HTMLElement;\n\n  /** Reference to the thumb bar HTMLElement. */\n  private _thumbBarEl: HTMLElement;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n\n  constructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean) {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n\n  /** Resets the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    applyCssTransform(this._thumbEl, '');\n\n    return this.dragPercentage > 50;\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number) {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    const dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    applyCssTransform(this._thumbEl, `translate3d(${dragX}px, 0, 0)`);\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {\n  GestureConfig,\n  MatCommonModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, PlatformModule, ObserversModule, A11yModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert() { return this._invert; }\n  set invert(value: any) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max() { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min() { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step() { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /** @deprecated */\n  @Input('thumb-label')\n  get _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n  set _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** @deprecated */\n  @Input('tick-interval')\n  get _tickIntervalDeprecated() { return this.tickInterval; }\n  set _tickIntervalDeprecated(v) { this.tickInterval = v; }\n\n  /** Value of the slider. */\n  @Input()\n  get value() {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v, this._value || 0);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical() { return this._vertical; }\n  set vertical(value: any) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() change = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() input = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundLabelTo: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    /* Emit a change and input event if the value changed. */\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule, BidiModule, A11yModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has closed. */\n  private _afterClosed = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterClosed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  closeWithAction(): void {\n    if (!this._onAction.closed) {\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterClosed.next();\n    this._afterClosed.complete();\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<void> {\n    return this._afterClosed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /**\n   * Extra CSS classes to be added to the snack bar container.\n   * @deprecated Use `panelClass` instead.\n   */\n  extraClasses?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction = 'ltr';\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** @docs-private */\nexport const SHOW_ANIMATION =\n  `${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`;\n\n/** @docs-private */\nexport const HIDE_ANIMATION =\n  `${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`;\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(HIDE_ANIMATION)),\n    transition('void => visible-top, void => visible-bottom', animate(SHOW_ANIMATION)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.closeWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarConfig} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n\n    const element: HTMLElement = this._elementRef.nativeElement;\n\n    if (this.snackBarConfig.panelClass || this.snackBarConfig.extraClasses) {\n      this._setCssClasses(this.snackBarConfig.panelClass);\n      this._setCssClasses(this.snackBarConfig.extraClasses);\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal(): EmbeddedViewRef<any> {\n    throw Error('Not yet implemented');\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the user-specified list of CSS classes to the element. */\n  private _setCssClasses(classList: undefined|string|string[]) {\n    if (!classList) {\n      return;\n    }\n\n    const element = this._elementRef.nativeElement;\n\n    if (Array.isArray(classList)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      classList.forEach(cssClass => element.classList.add(cssClass));\n    } else {\n      element.classList.add(classList);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  /** The MatRadioButton that emits the change event. */\n  source: MatRadioButton | null;\n  /** The value of the MatRadioButton. */\n  value: any;\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /**\n   * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n\n  set labelPosition(v) {\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      const event = new MatRadioChange();\n      event.source = this._selected;\n      event.value = this._value;\n      this.change.emit(event);\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(MatRadioButtonBase), 'accent');\n\n/**\n * A radio-button. May be inside of\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /**\n   * Whether or not the radio-button should appear before or after the label.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio.*/\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 23, speedFactor: 1.5};\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher **/\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    const event = new MatRadioChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, A11yModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      transform: 'translate3d(0, 0, 0)',\n      visibility: 'visible',\n    })),\n    state('void', style({\n      visibility: 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusTrap, FocusTrapFactory, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {debounceTime} from 'rxjs/operators/debounceTime';\nimport {map} from 'rxjs/operators/map';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {matDrawerAnimations} from './drawer-animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/**\n * Drawer toggle promise result.\n * @deprecated\n */\nexport class MatDrawerToggleResult {\n  constructor(\n    /** Whether the drawer is opened or closed. */\n    public type: 'open' | 'close',\n    /** Whether the drawer animation is finished. */\n    public animationFinished: boolean) {}\n}\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE');\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value) {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onAlignChanged.emit();\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** @deprecated */\n  @Input()\n  get align(): 'start' | 'end' { return this.position; }\n  set align(value) { this.position = value; }\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value) {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer is opened. */\n  private _opened: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /**\n   * Event emitted when the drawer is fully opened.\n   * @deprecated Use `opened` instead.\n   */\n  @Output('open') onOpen = this._openedStream;\n\n  /**\n   * Event emitted when the drawer is fully closed.\n   * @deprecated Use `closed` instead.\n   */\n  @Output('close') onClose = this._closedStream;\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged = new EventEmitter<void>();\n\n  /** @deprecated */\n  @Output('align-changed') onAlignChanged = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(v: boolean) {\n    this.toggle(coerceBooleanProperty(v));\n  }\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<void> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<void> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<void> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    // TODO(crisbeto): This promise is here for backwards-compatibility.\n    // It should be removed next time we do breaking changes in the drawer.\n    return new Promise<any>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => {\n        resolve(new MatDrawerToggleResult(open ? 'open' : 'close', true));\n      });\n    });\n  }\n\n  /**\n   * Handles the keyboard events.\n   * @docs-private\n   */\n  handleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === ESCAPE && !this.disableClose) {\n      this.close();\n      event.stopPropagation();\n    }\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width() {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * <mat-drawer-container> component.\n *\n * This is the parent component to one or two <mat-drawer>s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() backdropClick = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private _doCheckSubject = new Subject<void>();\n\n  _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (!this._dir || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end!.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && drawer.mode !== 'side')\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'side')\n        || (this._isDrawerOpen(this._end) && this._end!.mode != 'side');\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): boolean {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy, ChangeDetectorRef,\n  Component, ContentChild,\n  ContentChildren, forwardRef, Inject, Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers;\n\n  @ContentChild(MatSidenavContent) _content;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\nimport {\n  MatDrawer,\n  MatDrawerContainer,\n  MatDrawerContent,\n  MAT_DRAWER_DEFAULT_AUTOSIZE,\n} from './drawer';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    A11yModule,\n    OverlayModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  providers: [\n    {provide: MAT_DRAWER_DEFAULT_AUTOSIZE, useValue: false}\n  ]\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule, ARIA_DESCRIBER_PROVIDER} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n  MAT_TOOLTIP_DEFAULT_OPTIONS,\n  MatTooltip,\n  TooltipComponent,\n} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PlatformModule,\n    A11yModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n    ARIA_DESCRIBER_PROVIDER,\n    {\n      provide: MAT_TOOLTIP_DEFAULT_OPTIONS,\n      useValue: {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500\n      }\n    }\n  ],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional } from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable()\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel = 'Previous page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatPaginatorIntl} from './paginator-intl';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatPaginator implements OnInit, OnDestroy {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(pageIndex: number) {\n    this._pageIndex = coerceNumberProperty(pageIndex);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(length: number) {\n    this._length = coerceNumberProperty(length);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(pageSize: number) {\n    this._pageSize = coerceNumberProperty(pageSize);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(pageSizeOptions: number[]) {\n    this._pageSizeOptions = (pageSizeOptions || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() page = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage() {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage() {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage() {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage() {\n    const numberOfPages = Math.ceil(this.length / this.pageSize) - 1;\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent() {\n    this.page.next({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n\n/**\n * <mat-progress-bar> component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value() { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue() { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.1%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * <mat-progress-spinner> component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor,\n  OnChanges {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** The width and height of the host element. Will grow with stroke width. **/\n  _elementSize = BASE_SIZE;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number {\n    return this._diameter;\n  }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n    this._updateElementSize();\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.strokeWidth || changes.diameter) {\n      this._updateElementSize();\n    }\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this._elementSize * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n\n  /** Updates the spinner element size based on its diameter. */\n  private _updateElementSize() {\n    this._elementSize = this._diameter + Math.max(this.strokeWidth - BASE_STROKE_WIDTH, 0);\n  }\n}\n\n\n/**\n * <mat-spinner> component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <mat-progress-spinner> instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _positionSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /** @deprecated */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() menuOpened = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   */\n  @Output() onMenuOpen = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() menuClosed = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   */\n  @Output() onMenuClose = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if (reason === 'click' && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = this._parentMenu._hovered()\n          .pipe(filter(active => active === this._menuItemInstance))\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (!this._menuOpen) {\n      this._createOverlay().attach(this._portal);\n      this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n      this._initMenu();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._startAnimation();\n      }\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (this._overlayRef && this.menuOpen) {\n      this._resetMenu();\n      this._closeSubscription.unsubscribe();\n      this._overlayRef.detach();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._resetAnimation();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n\n    // If the menu was opened by mouse, we focus the root node, which allows for the keyboard\n    // interactions to work. Otherwise, if the menu was opened by keyboard, we focus the first item.\n    if (this._openedByMouse) {\n      let rootNode = this._overlayRef!.overlayElement.firstElementChild as HTMLElement;\n\n      if (rootNode) {\n        this.menu.resetActiveItem();\n        rootNode.focus();\n      }\n    } else {\n      this.menu.focusFirstItem();\n    }\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as ConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: !this.triggersSubmenu(),\n      backdropClass: 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    this._positionSubscription = position.onPositionChange.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): ConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .connectedTo(this._element, {originX, originY}, {overlayX, overlayY})\n        .withDirection(this.dir)\n        .withOffsetY(offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY},\n            {overlayX: overlayFallbackX, overlayY})\n        .withFallbackPosition(\n            {originX, originY: originFallbackY},\n            {overlayX, overlayY: overlayFallbackY},\n            undefined, -offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY: originFallbackY},\n            {overlayX: overlayFallbackX, overlayY: overlayFallbackY},\n            undefined, -offsetY);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatMenu, MAT_MENU_DEFAULT_OPTIONS} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuTrigger, MAT_MENU_SCROLL_STRATEGY_PROVIDER} from './menu-trigger';\nimport {MatRippleModule} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    CommonModule,\n    A11yModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger],\n  providers: [\n    MAT_MENU_SCROLL_STRATEGY_PROVIDER,\n    {\n      provide: MAT_MENU_DEFAULT_OPTIONS,\n      useValue: {\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n      },\n    }\n  ],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', [\n      style({\n        opacity: 0,\n        minWidth: '100%',\n        transform: 'scaleY(0)'\n      }),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ]),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/** @deprecated */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/** @deprecated */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER, ErrorStateMatcher]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatSelectionListBase)));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/**\n * Change event object emitted by MatListOption whenever the selected state changes.\n * @deprecated Use the `MatSelectionListChange` event on the selection list instead.\n */\nexport class MatListOptionChange {\n  constructor(\n    /** Reference to the list option that changed. */\n    public source: MatListOption,\n    /** The new selected state of the option. */\n    public selected: boolean) {}\n}\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _lineSetter: MatLineSetter;\n  private _selected: boolean = false;\n  private _disabled: boolean = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  /**\n   * Emits a change event whenever the selected state of an option changes.\n   * @deprecated Use the `selectionChange` event on the `<mat-selection-list>` instead.\n   */\n  @Output() selectionChange: EventEmitter<MatListOptionChange> =\n    new EventEmitter<MatListOptionChange>();\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */ @Optional() @Inject(forwardRef(() => MatSelectionList))\n              public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    if (this._selected) {\n      // List options that are selected at initialization can't be reported properly to the form\n      // control. This is because it takes some time until the selection-list knows about all\n      // available options. Also it can happen that the ControlValueAccessor has an initial value\n      // that should be used instead. Deferring the value change report to the next tick ensures\n      // that the form control value is not being overwritten.\n      Promise.resolve().then(() => this.selected = true);\n    }\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked.  */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n\n      // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n      this._emitDeprecatedChangeEvent();\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n\n  /** Emits a selectionChange event for this option. */\n  _emitDeprecatedChangeEvent() {\n    // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n    this.selectionChange.emit(new MatListOptionChange(this, this.selected));\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, HasTabIndex, AfterContentInit, ControlValueAccessor {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options).withWrap().withTypeAhead();\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n  }\n\n  /** Focus the selection-list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleSelectOnFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                                 this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Returns the option with the specified value. */\n  private _getOptionByValue(value: string): MatListOption | undefined {\n    return this.options.find(option => option.value === value);\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => this._getOptionByValue(value))\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n\n        // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n        focusedOption._emitDeprecatedChangeEvent();\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    // TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    state('enter-start', style({\n      opacity: 1,\n      transform: 'scale(1, 0.5)'\n    })),\n    state('enter', style({\n      transform: 'scale(1, 1)'\n    })),\n    transition('void => enter-start', animate('100ms linear')),\n    transition('enter-start => enter', animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/** @deprecated */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/** @deprecated */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** Stream that emits when the menu item is hovered. */\n  _hovered: Subject<MatMenuItem> = new Subject();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(private _elementRef: ElementRef) {\n    super();\n  }\n\n  /** Focuses the menu item. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  ngOnDestroy() {\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _emitHoverEvent() {\n    if (!this.disabled) {\n      this._hovered.next(this);\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === Node.TEXT_NODE) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matMenuAnimations} from './menu-animations';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options');\n\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  exportAs: 'matMenu'\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter-start' | 'enter' = 'void';\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition() { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition() { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /** List of the items inside of a menu. */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  get overlapTrigger(): boolean {\n    return this._overlapTrigger;\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   */\n  @Input()\n  set classList(classes: string) { this.panelClass = classes; }\n  get classList(): string { return this.panelClass; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() closed = new EventEmitter<void | 'click' | 'keydown'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('keydown'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    if (this.items) {\n      return this.items.changes.pipe(\n        startWith(this.items),\n        switchMap(items => merge(...items.map(item => item._hovered)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this._hovered()));\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu. This method is used by the menu trigger\n   * to focus the first item when the menu is opened by the ENTER key.\n   */\n  focusFirstItem() {\n    this._keyManager.setFirstItemActive();\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened by mouse,\n   * allowing the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    this._panelAnimationState = 'enter-start';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    // After the initial expansion is done, trigger the second phase of the enter animation.\n    if (event.toState === 'enter-start') {\n      this._panelAnimationState = 'enter';\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _lineSetter: MatLineSetter;\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  @ContentChild(MatListAvatarCssMatStyler)\n  set _hasAvatar(avatar: MatListAvatarCssMatStyler) {\n    if (avatar != null) {\n      this._element.nativeElement.classList.add('mat-list-item-avatar');\n    } else {\n      this._element.nativeElement.classList.remove('mat-list-item-avatar');\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked.  */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(filter: (date: D | null) => boolean) {\n    this._dateFilter = filter;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null {\n    return this._value;\n  }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled() { return !!this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() dateChange = new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() dateInput = new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D|null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this._formField ? this._formField.underlineRef : this._elementRef;\n  }\n\n  /**\n   * Determines the offset to be used when the calendar goes into a fallback position.\n   * Primarily used to prevent the calendar from overlapping the input.\n   */\n  _getPopupFallbackOffset(): number {\n    return this._formField ? -this._formField._inputContainerRef.nativeElement.clientHeight : 0;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MatDatepicker,\n  MatDatepickerContent,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatIconModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input() get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input() get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatDivider,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDivider,\n  ],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input() get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private  _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  forwardRef,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewContainerRef,\n  AfterContentInit,\n  ContentChild,\n} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {Subject} from 'rxjs/Subject';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {MatAccordion} from './accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {matExpansionAnimations} from './expansion-animations';\n\n// Boilerplate for applying mixins to MatExpansionPanel.\n/** @docs-private */\n@Component({\n  template: '',\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatExpansionPanelBase extends CdkAccordionItem {\n  constructor(accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n  }\n}\nexport const _MatExpansionPanelMixinBase = mixinDisabled(MatExpansionPanelBase);\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * <mat-expansion-panel> component.\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n *\n * Please refer to README.md for examples on how to use it.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  },\n  providers: [\n    {provide: _MatExpansionPanelMixinBase, useExisting: forwardRef(() => MatExpansionPanel)}\n  ],\n})\nexport class MatExpansionPanel extends _MatExpansionPanelMixinBase\n    implements CanDisable, AfterContentInit, OnChanges, OnDestroy {\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle;\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @Host() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatExpansionPanel} from './expansion-panel';\nimport {matExpansionAnimations} from './expansion-animations';\n\n\n/**\n * <mat-expansion-panel-header> component.\n *\n * This component corresponds to the header element of an <mat-expansion-panel>.\n *\n * Please refer to README.md for examples on how to use it.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    if (!this.panel.disabled) {\n      this.panel.toggle();\n    }\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * <mat-panel-description> directive.\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * <mat-panel-title> directive.\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelActionRow,\n  MatExpansionPanelBase\n} from './expansion-panel';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, A11yModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatExpansionPanelBase,\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /** Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2. */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'ltr' ? 'left' : 'right';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example <mat-grid-list cols=\"3\" rowHeight=\"100px\">\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example <mat-grid-list cols=\"3\" rowHeight=\"3:1\">\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height.*/\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('margin-top', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('padding-top', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'padding-bottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['padding-bottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('margin-top', null);\n      tile._setStyle('padding-top', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example <mat-grid-list cols=\"3\" rowHeight=\"fit\">\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols() { return this._cols; }\n  set cols(value: any) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize() { return this._gutter; }\n  set gutterSize(value: any) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() selectedChange = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() _userSelection = new EventEmitter<void>();\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit(): void {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    let dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      let date = this._dateAdapter.createDate(\n          this._dateAdapter.getYear(this.activeDate),\n          this._dateAdapter.getMonth(this.activeDate), i + 1);\n      let enabled = !this.dateFilter ||\n          this.dateFilter(date);\n      let ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, true);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _isMonthEnabled(month: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    let firstOfMonth = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {take} from 'rxjs/operators/take';\nimport {Subscription} from 'rxjs/Subscription';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage, yearsPerRow} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {Directionality} from '@angular/cdk/bidi';\n\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() _userSelection = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /** Date filter for the month, year, and multi-year views. */\n  _dateFilterForViews = (date: D) => {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  _currentView: 'month' | 'year' | 'multi-year';\n\n  /** The label for the current calendar view. */\n  get _periodButtonText(): string {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n          .toLocaleUpperCase();\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYearName(this._activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get _periodButtonLabel(): string {\n    return this._currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get _prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this._currentView];\n  }\n\n  /** The label for the the next button. */\n  get _nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this._currentView];\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _intl: MatDatepickerIntl,\n              private _ngZone: NgZone,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir?: Directionality) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles month selection in the multi-year view. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this._activeDate = date;\n    this._currentView = view;\n  }\n\n  /** Handles user clicks on the period label. */\n  _currentPeriodClicked(): void {\n    this._currentView = this._currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? -1 : -yearsPerPage);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? 1 : yearsPerPage);\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Handles keydown events on the calendar body. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._currentView == 'month') {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else if (this._currentView == 'year') {\n      this._handleCalendarBodyKeydownInYearView(event);\n    } else {\n      this._handleCalendarBodyKeydownInMultiYearView(event);\n    }\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  private _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n             this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (this._dateFilterForViews(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          this._userSelected();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  private _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'month');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  private _handleCalendarBodyKeydownInMultiYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'year');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatCalendar} from './calendar';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerContent<D> implements AfterContentInit {\n  datepicker: MatDatepicker<D>;\n\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  ngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDatepicker<D> implements OnDestroy {\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(date: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(date));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean {\n    return this._touchUi;\n  }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits new selected date when selected date changes.\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n   */\n  @Output() selectedChanged = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(shouldOpen: boolean) { shouldOpen ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  private _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<any> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  _disabledChange = new Subject<boolean>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      let componentRef: ComponentRef<MatDatepickerContent<D>> =\n          this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    const fallbackOffset = this._datepickerInput._getPopupFallbackOffset();\n\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'start', originY: 'top'},\n        {overlayX: 'start', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'top'},\n        {overlayX: 'end', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      );\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Move focus onto the dialog immediately in order to prevent the user from accidentally\n      // opening multiple dialogs at the same time. Needs to be async, because the element\n      // may not be focusable immediately.\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Location} from '@angular/common';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription, ISubscription} from 'rxjs/Subscription';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: ISubscription = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    private _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<void> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  OverlayContainer,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {defer} from 'rxjs/observable/defer';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private _afterAllClosedAtThisLevel = new Subject<void>();\n  private _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatDialogRef, dialogRef);\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes.  To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens.set(MatDialogContainer, dialogContainer);\n    injectionTokens.set(MAT_DIALOG_DATA, config.data);\n    injectionTokens.set(Directionality, {\n      value: config.direction,\n      change: observableOf()\n    });\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, OnChanges, OnInit, Optional, SimpleChanges} from '@angular/core';\nimport {MatDialogRef} from './dialog-ref';\nimport {MatDialogContainer} from './dialog-container';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(public dialogRef: MatDialogRef<any>) { }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(@Optional() private _container: MatDialogContainer) { }\n\n  ngOnInit() {\n    if (this._container && !this._container._ariaLabelledBy) {\n      Promise.resolve().then(() => this._container._ariaLabelledBy = this.id);\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent { }\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatDialog,\n  MAT_DIALOG_SCROLL_STRATEGY_PROVIDER\n} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n  MatDialogActions\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {catchError} from 'rxjs/operators/catchError';\nimport {tap} from 'rxjs/operators/tap';\nimport {finalize} from 'rxjs/operators/finalize';\nimport {map} from 'rxjs/operators/map';\nimport {share} from 'rxjs/operators/share';\nimport {\n  Injectable,\n  Inject,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n  constructor(public url: SafeResourceUrl) { }\n}\n\n/**\n * Service to register and display icons used by the <mat-icon> component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable()\nexport class MatIconRegistry {\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an <mat-icon> component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) private _document?: any) {\n      // TODO(crisbeto): make _document required next major release.\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const config = new SvgIconConfig(url);\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the <mat-icon> element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an <mat-icon> component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an <mat-icon> component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg))\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg))\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new <svg> element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          }),\n          tap(svg => {\n            // Cache the SVG element.\n            if (svg) {\n              iconSetConfig.svgElement = svg;\n            }\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // TODO: Document that icons should only be loaded from trusted sources.\n    return this._fetchUrl(config.url).pipe(map(svgText => this._svgElementFromString(svgText)));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.id = '';\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    if (this._document || typeof document !== 'undefined') {\n      const div = (this._document || document).createElement('DIV');\n      div.innerHTML = str;\n      const svg = div.querySelector('svg') as SVGElement;\n      if (!svg) {\n        throw Error('<svg> tag not found');\n      }\n      return svg;\n    }\n\n    throw new Error('MatIconRegistry could not resolve document.');\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      // Note: 1 corresponds to `Node.ELEMENT_NODE` which we can't use in Universal.\n      if (element.childNodes[i].nodeType === 1) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share()\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>]\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators/take';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     <mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the <mat-icon>\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     <mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     <mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {auditTime} from 'rxjs/operators/auditTime';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\n@Directive({\n  selector: `textarea[mat-autosize], textarea[matTextareaAutosize]`,\n  exportAs: 'matTextareaAutosize',\n  host: {\n    'class': 'mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n})\nexport class MatTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue: string;\n  private _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('matAutosizeMinRows')\n  get minRows() { return this._minRows; }\n  set minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('matAutosizeMaxRows')\n  get maxRows() { return this._maxRows; }\n  set maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _platform: Platform,\n    private _ngZone?: NgZone) {}\n\n  // TODO(crisbeto): make the `_ngZone` a required param in the next major version.\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() => {\n          fromEvent(window, 'resize')\n            .pipe(auditTime(16), takeUntil(this._destroyed))\n            .subscribe(() => this.resizeToFitContent(true));\n        });\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Sets a style property on the textarea element. */\n  private _setTextareaStyle(property: string, value: string): void {\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    textarea.style[property] = value;\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    let textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = textarea.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    textarea.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textarea.parentNode!.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    this._cacheTextareaLineHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize of the value changed since these calculations can be expensive.\n    if (value === this._previousValue && !force) {\n      return;\n    }\n\n    const placeholderText = textarea.placeholder;\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n    // need to be removed temporarily.\n    textarea.style.height = 'auto';\n    textarea.style.overflow = 'hidden';\n    textarea.placeholder = '';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n    textarea.style.overflow = '';\n    textarea.placeholder = placeholderText;\n\n    this._previousValue = value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs/Subject';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n  /** Variables used as cache for getters and setters. */\n  protected _type = 'text';\n  protected _disabled = false;\n  protected _required = false;\n  protected _id: string;\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _readonly = false;\n  private _inputValueAccessor: {value: any};\n\n  /** Whether the input is focused. */\n  focused = false;\n\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Stream that emits whenever the state of the input changes such that the wrapping `MatFormField`\n   * needs to run change detection.\n   */\n  stateChanges = new Subject<void>();\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-input';\n\n  /** Whether the element is disabled. */\n  @Input()\n  get disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n  set disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Unique id of the element. */\n  @Input()\n  get id() { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n\n  /** Placeholder attribute of the element. */\n  @Input() placeholder: string = '';\n\n  /** Whether the element is required. */\n  @Input()\n  get required() { return this._required; }\n  set required(value: any) { this._required = coerceBooleanProperty(value); }\n\n  /** Input type of the element. */\n  @Input()\n  get type() { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** The input element's value. */\n  @Input()\n  get value(): any { return this._inputValueAccessor.value; }\n  set value(value: any) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly() { return this._readonly; }\n  set readonly(value: any) { this._readonly = coerceBooleanProperty(value); }\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  focus() { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. If not recognizable it returns false. */\n  protected _isTextarea() {\n    let nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  // Implemented as part of MatFormFieldControl.\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of MatFormFieldControl.\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  declarations: [\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    PlatformModule,\n  ],\n  exports: [\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable()\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() selectedValueChange = new EventEmitter<number>();\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  private _required: boolean;\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /**\n   * Whether or not the checkbox should appear before or after the label.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() change: EventEmitter<MatCheckboxChange> = new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\"> element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 25, speedFactor: 1.5};\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _checked: boolean = false;\n\n  private _indeterminate: boolean = false;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input() get checked() {\n    return this._checked;\n  }\n\n  set checked(checked: boolean) {\n    if (checked != this.checked) {\n      this._checked = checked;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input() get indeterminate() {\n    return this._indeterminate;\n  }\n\n  set indeterminate(indeterminate: boolean) {\n    let changed =  indeterminate != this._indeterminate;\n    this._indeterminate = indeterminate;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Function to be called on change.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control has been touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be triggered when the checkbox is touched.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the checkbox should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this.onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatRippleModule, MatCommonModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule, A11yModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n} from '@angular/core';\nimport {CanColor, CanDisable, mixinColor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase = mixinColor(mixinDisabled(MatChipBase), 'primary');\n\n\n/**\n * Dummy directive to add CSS class to basic chips.\n * @docs-private\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip]`,\n  host: {'class': 'mat-basic-chip'},\n})\nexport class MatBasicChip {\n}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_hasFocus = true',\n    '(blur)': '_blur()',\n  },\n\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable {\n\n  protected _value: any;\n\n  protected _selected: boolean = false;\n\n  protected _selectable: boolean = true;\n\n  protected _removable: boolean = true;\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean {\n    return this._selected;\n  }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  /** The value of the chip. Defaults to the content inside <mat-chip> tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(newValue: any) {\n    this._value = newValue;\n  }\n\n  /**\n   * Whether or not the chips are selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored.\n   */\n  @Input() get selectable(): boolean {\n    return this._selectable;\n  }\n\n\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (remove) events.\n   */\n  @Input() get removable(): boolean {\n    return this._removable;\n  }\n\n\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n\n  /** Emits when the chip is focused. */\n  _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() selectionChange = new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() destroyed = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when the chip is destroyed.\n   * @deprecated Use 'destroyed' instead.\n   */\n  @Output() destroy = this.destroyed;\n\n  /** Emitted when a chip is to be removed. */\n  @Output() removed = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when a chip is to be removed.\n   * @deprecated Use `removed` instead.\n   */\n  @Output('remove') onRemove = this.removed;\n\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed.emit({chip: this});\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n    this._onFocus.next({chip: this});\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.focus();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     <mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)'\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n    ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  readonly controlType = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription|null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription|null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription|null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription|null;\n\n  /** Whether or not the chip is selectable. */\n  protected _selectable: boolean = true;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Id of the chip list */\n  protected _id: string;\n\n  /** Uid of the chip list */\n  protected _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** Whether this is required */\n  protected _required: boolean = false;\n\n  /** Whether this is disabled */\n  protected _disabled: boolean = false;\n\n  protected _value: any;\n\n  /** Placeholder for the chip list. Alternatively, placeholder can be set on MatChipInput */\n  protected _placeholder: string;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  get role(): string|null {\n    return this.empty ? null : 'listbox';\n  }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Required for FormFieldControl */\n  @Input()\n  get value() { return this._value; }\n  set value(newValue: any) {\n    this.writeValue(newValue);\n    this._value = newValue;\n  }\n\n  /** Required for FormFieldControl. The ID of the chip list */\n  @Input()\n  set id(value: string) {\n    this._id = value;\n    this.stateChanges.next();\n  }\n  get id() { return this._id || this._uid; }\n\n  /** Required for FormFieldControl. Whether the chip list is required. */\n  @Input()\n  set required(value: any) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  get required() {\n    return this._required;\n  }\n\n  /** For FormFieldControl. Use chip input's placholder if there's a chip input */\n  @Input()\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  get placeholder() {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /** Whether this chip-list contains no chips and no matChipInput. */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  get shouldLabelFloat(): boolean {\n    return !this.empty || this.focused;\n  }\n\n  /** Whether this chip-list is disabled. */\n  @Input()\n  get disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip is selectable. When a chip is not selectable,\n   * its selected state is always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) { this._selectable = coerceBooleanProperty(value); }\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroy));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() change: EventEmitter<MatChipListChange> = new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() valueChange = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit(): void {\n\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips).withWrap();\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput) {\n    this._chipInput = inputElement;\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n    this._elementRef.nativeElement.disabled = disabled;\n    this.stateChanges.next();\n  }\n\n  onContainerClick() {\n    this.focus();\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus() {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    let code = event.keyCode;\n    let target = event.target as HTMLElement;\n    let isInputEmpty = this._isInputEmpty(target);\n    let isRtl = this._dir && this._dir.value == 'rtl';\n\n    let isPrevKey = (code === (isRtl ? RIGHT_ARROW : LEFT_ARROW));\n    let isNextKey = (code === (isRtl ? LEFT_ARROW : RIGHT_ARROW));\n    let isBackKey = code === BACKSPACE;\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (isInputEmpty && isBackKey) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n      return;\n    }\n\n    // If they are on a chip, check for space/left/right, otherwise pass to our key manager (like\n    // up/down keys)\n    if (target && target.classList.contains('mat-chip')) {\n      if (isPrevKey) {\n        this._keyManager.setPreviousItemActive();\n        event.preventDefault();\n      } else if (isNextKey) {\n        this._keyManager.setNextItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n    }\n    this.stateChanges.next();\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        const correspondingChipIndex = this.chips.toArray().indexOf(correspondingChip);\n\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChipIndex);\n        } else {\n          this._keyManager.updateActiveItemIndex(correspondingChipIndex);\n        }\n\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(_ => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((event) => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {Directive, ElementRef, EventEmitter, Input, Output} from '@angular/core';\nimport {MatChipList} from './chip-list';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside <mat-form-field>.\n * May be placed inside or outside of an <mat-chip-list>.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n  }\n})\nexport class MatChipInput {\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur() { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes') separatorKeyCodes: number[] = [ENTER];\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Whether the input is empty. */\n  get empty(): boolean {\n    let value: string | null = this._inputElement.value;\n    return (value == null || value === '');\n  }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  focus() { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChipList} from './chip-list';\nimport {MatBasicChip, MatChip, MatChipRemove} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n@NgModule({\n  imports: [],\n  exports: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipRemove, MatBasicChip],\n  declarations: [MatChipList, MatChip, MatChipInput, MatChipRemove,  MatChipRemove, MatBasicChip],\n  providers: [ErrorStateMatcher]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction = 'ltr';\n\n  /** ID of the element that describes the dialog.  */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n\n// TODO(kara): Convert attribute selectors to classes when attr maps become available\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-button], a[mat-button]',\n  host: {'class': 'mat-button'}\n})\nexport class MatButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-raised-button], a[mat-raised-button]',\n  host: {'class': 'mat-raised-button'}\n})\nexport class MatRaisedButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-icon-button], a[mat-icon-button]',\n  host: {'class': 'mat-icon-button'}\n})\nexport class MatIconButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-fab], a[mat-fab]',\n  host: {'class': 'mat-fab'}\n})\nexport class MatFab {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-mini-fab], a[mat-mini-fab]',\n  host: {'class': 'mat-mini-fab'}\n})\nexport class MatMiniFab {}\n\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this._isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  constructor(\n      platform: Platform,\n      focusMonitor: FocusMonitor,\n      elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {\n  MatAnchor,\n  MatButton,\n  MatMiniFab,\n  MatButtonCssMatStyler,\n  MatFab,\n  MatIconButtonCssMatStyler,\n  MatRaisedButtonCssMatStyler\n} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatCommonModule,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  /** The MatButtonToggle that emits the event. */\n  source: MatButtonToggle | null;\n  /** The value assigned to the MatButtonToggle. */\n  value: any;\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group:not([multiple])',\n  providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase\n    implements ControlValueAccessor, CanDisable {\n\n  /** The value for the button toggle group. Should match currently selected button toggle. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to toggles in this group. */\n  private _name: string = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the button toggle group should be vertical. */\n  private _vertical: boolean = false;\n\n  /** The currently selected button toggle, should match the value. */\n  private _selected: MatButtonToggle | null = null;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string {\n    return this._name;\n  }\n\n  set name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean {\n    return this._vertical;\n  }\n\n  set vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      this._value = newValue;\n      this.valueChange.emit(newValue);\n      this._updateSelectedButtonToggleFromValue();\n    }\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() valueChange = new EventEmitter<any>();\n\n  /** Whether the toggle group is selected. */\n  @Input()\n  get selected() {\n    return this._selected;\n  }\n\n  set selected(selected: MatButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() change: EventEmitter<MatButtonToggleChange> = new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  private _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n\n  // TODO: Refactor into shared code with radio.\n  private _updateSelectedButtonToggleFromValue(): void {\n    let isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback that will be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn On change callback function.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback that will be triggered when the control has been touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn On touch callback function.\n   */\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n   * @param isDisabled Whether the component should be disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._markButtonTogglesForCheck();\n  }\n\n  private _markButtonTogglesForCheck() {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => toggle._markForCheck());\n    }\n  }\n}\n\n/** Multiple selection button-toggle group. `ngModel` is not supported in this mode. */\n@Directive({\n  selector: 'mat-button-toggle-group[multiple]',\n  exportAs: 'matButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    'role': 'group'\n  }\n})\nexport class MatButtonToggleGroupMultiple extends _MatButtonToggleGroupMixinBase\n    implements CanDisable {\n\n  /** Whether the button toggle group should be vertical. */\n  private _vertical: boolean = false;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean {\n    return this._vertical;\n  }\n\n  set vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle implements OnInit, OnDestroy {\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether or not this button toggle is checked. */\n  private _checked: boolean = false;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  /** Whether or not this button toggle is disabled. */\n  private _disabled: boolean = false;\n\n  /** Value assigned to this button toggle. */\n  private _value: any = null;\n\n  /** Whether or not the button toggle is a single selection. */\n  private _isSingleSelector: boolean = false;\n\n  /** Unregister function for _buttonToggleDispatcher **/\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** The parent button toggle group (multiple selection). Optional. */\n  buttonToggleGroupMultiple: MatButtonToggleGroupMultiple;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string {\n    return `${this.id}-input`;\n  }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(newCheckedState: boolean) {\n    if (this._isSingleSelector && newCheckedState) {\n      // Notify all button toggles with the same name (in the same group) to un-check.\n      this._buttonToggleDispatcher.notify(this.id, this.name);\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._checked = newCheckedState;\n\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n\n  set value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group value changes. */\n  @Output() change: EventEmitter<MatButtonToggleChange> = new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              @Optional() toggleGroupMultiple: MatButtonToggleGroupMultiple,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _buttonToggleDispatcher: UniqueSelectionDispatcher,\n              private _elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor) {\n\n    this.buttonToggleGroup = toggleGroup;\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n            this._changeDetectorRef.markForCheck();\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n\n  ngOnInit() {\n    if (this.id == null) {\n      this.id = `mat-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  /** Focuses the button. */\n  focus() {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Toggle the state of the current button toggle. */\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      let groupValueChanged = this.buttonToggleGroup.selected != this;\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup._onTouched();\n      if (groupValueChanged) {\n        this.buttonToggleGroup._emitChangeEvent();\n      }\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  // Unregister buttonToggleDispatcherListener on destroy\n  ngOnDestroy(): void {\n    this._removeUniqueSelectionListener();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update button toggle's status\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle} from './button-toggle';\nimport {MatCommonModule} from '@angular/material/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [MatCommonModule, A11yModule],\n  exports: [\n    MatButtonToggleGroup,\n    MatButtonToggleGroupMultiple,\n    MatButtonToggle,\n    MatCommonModule,\n  ],\n  declarations: [MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the <mat-card> component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardHeader,\n  MatCardTitleGroup,\n  MatCardContent,\n  MatCardTitle,\n  MatCardSubtitle,\n  MatCardActions,\n  MatCardFooter,\n  MatCardSmImage,\n  MatCardMdImage,\n  MatCardLgImage,\n  MatCardImage,\n  MatCardXlImage,\n  MatCardAvatar,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {Subject} from 'rxjs/Subject';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  AfterViewChecked,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n\n  /**\n   * Counts the amount of option group labels that precede the specified option.\n   * @param optionIndex Index of the option at which to start counting.\n   * @param options Flat list of all of the options.\n   * @param optionGroups Flat list of all of the option groups.\n   */\n  static countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n    optionGroups: QueryList<MatOptgroup>): number {\n\n    if (optionGroups.length) {\n      let optionsArray = options.toArray();\n      let groups = optionGroups.toArray();\n      let groupCounter = 0;\n\n      for (let i = 0; i < optionIndex + 1; i++) {\n        if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n          groupCounter++;\n        }\n      }\n\n      return groupCounter;\n    }\n\n    return 0;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat?: boolean;\n\n  /**\n   * Whether the `MatFormField` placeholder should try to float.\n   * @deprecated Use `shouldLabelFloat` instead.\n   */\n  readonly shouldPlaceholderFloat?: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FloatLabelType, MAT_LABEL_GLOBAL_OPTIONS, LabelOptions} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {MatError} from './error';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatLabel} from './label';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {matFormFieldAnimations} from './form-field-animations';\n\n\nlet nextUniqueId = 0;\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\n  selector: 'mat-input-container, mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: ['form-field.css', '../input/input.css'],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-input-container mat-form-field',\n    '[class.mat-input-invalid]': '_control.errorState',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField implements AfterViewInit, AfterContentInit, AfterContentChecked {\n  private _labelOptions: LabelOptions;\n\n  /** Color of the form field underline, based on the theme. */\n  @Input() color: 'primary' | 'accent' | 'warn' = 'primary';\n\n  /** @deprecated Use `color` instead. */\n  @Input()\n  get dividerColor(): 'primary' | 'accent' | 'warn' { return this.color; }\n  set dividerColor(value) { this.color = value; }\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker() { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: any) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat() {\n    return this._floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat() { return this._floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel() { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the placeholder should always float, never float or float as the user types.\n   * @deprecated Use floatLabel instead.\n   */\n  @Input()\n  get floatPlaceholder() { return this._floatLabel; }\n  set floatPlaceholder(value: FloatLabelType) { this.floatLabel = value; }\n\n  /** Whether the label should always float, never float or float as the user types. */\n  @Input()\n  get floatLabel() { return this._floatLabel; }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Reference to the form field's underline element. */\n  @ViewChild('underline') underlineRef: ElementRef;\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions) {\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat ||\n        this._control.shouldPlaceholderFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    return !this._hasLabel() || !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    return this._hasLabel() || this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this._floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align == 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align == 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {MatLabel} from './label';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean {\n    return this._isOpen && this.showPanel;\n  }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(classList: string) {\n    if (classList && classList.length) {\n      classList.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef, private _elementRef: ElementRef) {\n    super();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibiity state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n}\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values.  */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs/Subject';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField needs to run change detection.\n     */\n    stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   */\n  useUtcForDisplay: boolean;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    // TODO(mmalerba): replace with checks from PLATFORM, logic currently duplicated to avoid\n    // breaking change from injecting the Platform.\n    const isBrowser = typeof document === 'object' && !!document;\n    const isIE = isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n\n    this.useUtcForDisplay = !isIE;\n    this._clampDate = isIE || (isBrowser && /(edge)/i.test(navigator.userAgent));\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      if (this.useUtcForDisplay) {\n        date = new Date(Date.UTC(\n            date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n            date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n        displayFormat = {...displayFormat, timeZone: 'utc'};\n      }\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    let result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Applies a CSS transform to an element, including browser-prefixed properties.\n * @param element\n * @param transformValue\n */\nexport function applyCssTransform(element: HTMLElement, transformValue: string) {\n  // It's important to trim the result, because the browser will ignore the set operation\n  // if the string contains only whitespace.\n  let value = transformValue.trim();\n\n  element.style.transform = value;\n  element.style.webkitTransform = value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks');\n\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n\n/** Provider for MAT_DATE_LOCALE injection token. */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges= new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n    MAT_DATE_LOCALE_PROVIDER\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable()\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/* Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /* List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   */\n  baseSpeedFactor?: number;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Launches a manual ripple at the specified position. */\n  launch(x: number, y: number, config: RippleConfig = this): RippleRef {\n    return this._rippleRenderer.fadeInRipple(x, y, config);\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n      radius: this.radius,\n      color: this.color\n    };\n  }\n\n  /** Whether ripples on pointer-down are  disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <mat-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["SELECT_PANEL_PADDING_X","this","_leavingSub","_host","_afterLeavingCenter","subscribe","_this","detach","MatTabBodyPortal","prototype","ngOnDestroy","_centeringSub","closed","unsubscribe","type","Directive","args","selector","ComponentFactoryResolver","ViewContainerRef","MatTabBody","decorators","Inject","forwardRef","CdkPortalOutlet","_elementRef","_dir","_onCentering","EventEmitter","_beforeCentering","_onCentered","Object","defineProperty","position","_position","_getLayoutDirection","origin","dir","_origin","ngOnInit","_onTranslateTabStarted","e","isCentering","_isCenterPosition","toState","emit","nativeElement","clientHeight","_onTranslateTabComplete","fromState","value","Component","template","styles","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","animations","matTabsAnimations","translateTab","host","class","propDecorators","Output","_content","Input","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","mixinDisableRipple","MatTabGroup","elementRef","_changeDetectorRef","_super","call","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","selectChange","_groupId","tslib_1.__extends","coerceBooleanProperty","coerceNumberProperty","_backgroundColor","classList","remove","backgroundColor","add","ngAfterContentChecked","indexToSelect","Math","min","_tabs","length","max","tabChangeEvent","_createChangeEvent","Promise","resolve","then","forEach","tab","index","isActive","markForCheck","ngAfterContentInit","_subscribeToTabLabels","changes","_focusChanged","event","toArray","merge","apply","map","_disableChange","concat","_labelChange","_getTabLabelId","i","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","style","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","disabled","selectedIndex","focusIndex","_getTabIndex","exportAs","inputs","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","_dynamicHeightDeprecated","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","mixinDisabled","MatTabLabelWrapper","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","ElementRef","MatTabHeaderBase","_MatTabHeaderMixinBase","MatTabHeader","_viewportRuler","_focusIndex","_scrollDistance","_selectedIndexChanged","_realignInkBar","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","selectFocusedIndex","indexFocused","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","ENTER","SPACE","preventDefault","dirChange","change","observableOf","resize","realign","requestAnimationFrame","_onContentChanges","_checkPaginationEnabled","_isValidIndex","_setTabFocus","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","_moveFocus","offset","tabs","scrollDistance","translateX","_tabList","transform","v","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","_inkBar","alignToElement","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","ViewChild","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_ngZone","_onDestroy","Subject","_disableRipple","_setLinkDisableRipple","updateActiveLink","element","_activeLinkChanged","_activeLinkElement","runOutsideAngular","pipe","takeUntil","_alignInkBar","next","complete","_tabLinks","link","disableRipple","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","_tabNavBar","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","rippleConfig","speedFactor","baseSpeedFactor","get","enumerable","configurable","MatTabLink","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-label-active]","(click)","Platform","undefined","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","MatTabsModule","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","ScrollDispatchModule","exports","MatTabLabel","MatTab","declarations","MatInkBar","providers","VIEWPORT_RULER_PROVIDER","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","slice","childNodes","filter","node","contains","nodeType","Node","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","MatToolbarModule","PlatformModule","VERSION","Version","overlayConfig","direction","config","positionStrategy","_overlay","global","isRtl","isLeft","horizontalPosition","isRight","left","right","centerHorizontally","verticalPosition","top","bottom","create","MatSnackBar","_createInjector","snackBarRef","userInjector","viewContainerRef","injector","injectionTokens","WeakMap","set","MatSnackBarRef","MAT_SNACK_BAR_DATA","data","PortalInjector","_injector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSnackBarModule","OverlayModule","LayoutModule","MatSnackBarContainer","SimpleSnackBar","entryComponents","LIVE_ANNOUNCER_PROVIDER","MatSortBase","_MatSortMixinBase","sortables","Map","_stateChanges","start","_direction","sortChange","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","sort","active","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","indexOf","ngOnChanges","sortButtonLabel","sortDescriptionLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","provide","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","matSortAnimations","indicator","trigger","state","transition","animate","leftPointer","rightPointer","indicatorToggle","keyframes","opacity","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_sort","_cdkColumnDef","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","name","_isDisabled","_isSorted","[class.mat-sort-header-sorted]","[class.mat-sort-header-disabled]","CdkColumnDef","MatSortModule","MatStepLabel","TemplateRef","CdkStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_focusMonitor","_element","monitor","_intlSubscription","_index","_selected","_active","_optional","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","role","selected","optional","matStepperAnimations","horizontalStepTransition","visibility","verticalStepTransition","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","useExisting","MatStepper","arguments","_steps","_destroyed","_stateChanged","MatHorizontalStepper","aria-orientation","ctorParameters","MatVerticalStepper","MatStepperNext","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","A11yModule","MatTable","CDK_TABLE_TEMPLATE","CdkTable","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatColumnDef","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","MatRow","MatTableModule","CdkTableModule","MatTableDataSource","initialData","_renderData","BehaviorSubject","_filter","sortingDataAccessor","sortHeaderId","isNaN","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","_data","_updateChangeSubscription","_paginator","paginator","empty","pageChange","page","_renderChangesSubscription","combineLatest","_a","_filterData","startWith","_orderData","_pageData","filteredData","obj","_updatePaginator","a","b","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","connect","disconnect","show","_setStyles","hide","inkBar","width","templateRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","hasOwnProperty","TemplatePortal","_componentFactoryResolver","attach","hasAttached","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","FocusMonitor","MatSlideToggle","labelPosition","ariaLabel","ariaLabelledby","required","checked","_inputElement","_ripple","MatRipple","_thumbBarEl","querySelector","_thumbBarWidth","clientWidth","_thumbEl","_previousChecked","dragging","applyCssTransform","dragX","dragPercentage","percentage","SlideToggleRenderer","MatSlideToggleModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MAT_SLIDER_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlider","multi","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","input","onTouched","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundLabelTo","toString","split","pop","tickInterval","toFixed","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_focusHostElement","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","END","HOME","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","source","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","(focus)","(blur)","(keydown)","(keyup)","(mouseenter)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","_thumbLabelDeprecated","_tickIntervalDeprecated","MatSliderModule","BidiModule","containerInstance","_overlayRef","_afterClosed","_afterOpened","_onAction","onAction","dismiss","_onExit","_finishDismiss","exit","clearTimeout","_durationTimeoutId","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","afterDismissed","asObservable","afterOpened","_onEnter","InjectionToken","MatSnackBarConfig","politeness","announcementMessage","SHOW_ANIMATION","DECELERATION_CURVE","HIDE_ANIMATION","EXITING","ACCELERATION_CURVE","matSnackBarAnimations","contentFade","COMPLEX","snackBarState","action","[@contentFade]","_animationState","attachComponentPortal","portal","_portalOutlet","Error","snackBarConfig","panelClass","extraClasses","_setCssClasses","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","onMicrotaskEmpty","take","Array","isArray","cssClass","[@state]","(@state.done)","BasePortalOutlet","_live","_breakpointObserver","_parentSnackBar","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","_config","_applyConfigDefaults","_attach","announce","open","message","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","containerRef","instance","_createOverlay","container","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","OverlayConfig","MatRadioButton","_checked","newCheckedState","radioGroup","_radioDispatcher","notify","_changeDetector","_labelPosition","_disabled","_required","_uniqueId","focusVia","_markForCheck","focusOrigin","_onInputFocusChange","_removeUniqueSelectionListener","MatRadioChange","_isRippleDisabled","_onInputClick","stopPropagation","_onInputChange","groupValueChanged","_touch","_focusRipple","fadeOut","launch","tslib_1.__assign","persistent","_rippleConfig","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","align","_MatRadioButtonMixinBase","MatRadioModule","MatRadioGroup","UNIQUE_SELECTION_DISPATCHER_PROVIDER","matDrawerAnimations","transformDrawer","MatDrawerToggleResult","animationFinished","MAT_DRAWER_DEFAULT_AUTOSIZE","MatDrawerContent","_container","_margins","_contentMargins","margins","[style.margin-left.px]","[style.margin-right.px]","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","MatDrawer","onAlignChanged","onPositionChanged","_modeChanged","mode","HTMLElement","_openedVia","blur","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","close","openedChange","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","DOCUMENT","_openedStream","openedStart","_closedStream","closedStart","onOpen","onClose","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","_isShowingBackdrop","_width","ContentChildren","ContentChild","autosize","MatSidenavContent","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","MatSidenavContainer","MatSidenavModule","useValue","nextUniqueId","MatSlideToggleChange","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","centered","radius","_slideRenderer","_onChangeEvent","toggle","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","newCheckedValue","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","_tooltipInstance","updatePosition","MatTooltip","_setTooltipClass","tooltipClass","_invertPosition","(longpress)","(touchend)","ScrollDispatcher","AriaDescriber","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_DEFAULT_OPTIONS","_positionDeprecated","showDelay","hideDelay","TooltipComponent","_visibility","_closeOnInteraction","_transformOrigin","_onHide","delay","_hideTimeoutId","_showTimeoutId","afterHidden","isVisible","_setTransformOrigin","overlayPosition","overlayX","overlayY","getMatTooltipInvalidPositionError","_animationStart","_animationDone","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","ɵ0","touchendHideDelay","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER","ARIA_DESCRIBER_PROVIDER","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginator","_pageIndex","_length","_pageSizeOptions","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","pageSizeOptions","p","_initialized","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","numberOfPages","_changePageSize","floor","_displayedPageSizeOptions","push","MatPaginatorModule","MatSelectModule","MatProgressBarBase","_MatProgressBarMixinBase","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","_document","_fallbackAnimation","_elementSize","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_updateElementSize","_strokeWidth","diameter","newValue","viewBox","_circleRadius","strokeWidth","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","document","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroupBase","_MatRadioGroupMixinBase","_name","_isInitialized","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_radios","radio","isAlreadySelected","event_1","descendants","MatRadioButtonBase","listen","menu","MatMenu","_resetAnimation","MatMenuTrigger","_initMenu","parentMenu","triggersSubmenu","_parentMenu","_setMenuElevation","_setIsMenuOpen","_openedByMouse","rootNode","resetActiveItem","focusFirstItem","setElevation","depth","_resetMenu","_menuOpen","menuOpened","menuClosed","_menuItemInstance","_highlighted","_checkMenu","throwMatMenuMissingError","_portal","_getOverlayConfig","_subscribeToPositions","_getPosition","hasBackdrop","backdropClass","scrollStrategy","_scrollStrategy","_positionSubscription","onPositionChange","posX","connectionPair","posY","setPositionClasses","xPosition","originX","originFallbackX","_b","yPosition","overlayFallbackY","_c","originY","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","connectedTo","withDirection","withOffsetY","withFallbackPosition","_cleanUpSubscriptions","_closeSubscription","_hoverSubscription","_menuClosingActions","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","openMenu","toggleMenu","aria-haspopup","(mousedown)","MAT_MENU_SCROLL_STRATEGY","MatMenuItem","Self","_deprecatedMatMenuTriggerFor","onMenuOpen","onMenuClose","MAT_MENU_SCROLL_STRATEGY_PROVIDER","MAT_MENU_DEFAULT_OPTIONS","MatMenuModule","matSelectAnimations","transformPanel","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","selectionChange","valueChange","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","o","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_setSelectionByValue","selectedOptions","viewValue","_isRtl","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","_keyManager","onKeydown","manager","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","find","error","console","warn","select","skip","clear","deselect","ActiveDescendantKeyManager","withTypeAhead","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","_setOptionIds","wasSelected","isSelected","_getOptionIndex","_propagateChanges","fallbackValue","valueToEmit","itemHeight","_getItemHeight","activeOptionIndex","labelCount","MatOption","countGroupLabelsBeforeOption","optionGroups","scrollOffset","panelTop","result","current","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOptgroup","customTrigger","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY","_scrollDispatcher","_ariaDescriber","_defaultOptions","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_disposeTooltip","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","removeEventListener","_createTooltip","ESCAPE","_handleTouchend","_getOrigin","overlay","_getOverlayPosition","strategy","main","fallback","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","scrollableViewProperties","isOverlayClipped","isDirectionLtr","isLtr","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","matMenuAnimations","transformMenu","fadeInItems","MatMenuItemBase","_MatMenuItemMixinBase","_triggersSubmenu","_checkDisabled","_emitHoverEvent","getLabel","output","length_1","TEXT_NODE","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","_xPosition","_yPosition","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","newElevation","customElevation","c","_previousElevation","_startAnimation","_onAnimationDone","MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY","reason","_destroyMenu","closeMenu","menuOpen","_navList","_isNavList","_lineSetter","MatLineSetter","_lines","_handleFocus","_handleBlur","_MatListItemMixinBase","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatListOptionChange","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","_removeOptionFromList","_text","_emitDeprecatedChangeEvent","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","_tempValues","_setOptionsFromValues","optionIndex","setNextItemActive","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","_getOptionByValue","Boolean","focusedOption","focusedIndex","_dateFilter","_validatorOnChange","MatDatepickerInput","_dateAdapter","deserialize","_lastValueValid","isValid","_getValidDateOrNull","oldDate","format","_dateFormats","display","dateInput","sameDate","_valueChange","_disabledChange","_datepicker","_datepickerSubscription","selectedChanged","_cvaOnChange","MatDatepickerInputEvent","dateChange","_localeSubscription","registerOnValidatorChange","validate","_validator","getPopupConnectionElementRef","_formField","underlineRef","_getPopupFallbackOffset","_inputContainerRef","_onInput","date","parse","isDateInstance","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","matDatepickerFilter","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","datepickerToggled","openedStream","closedStream","[class.mat-datepicker-toggle-active]","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","MatExpansionPanelContent","_template","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelBase","accordion","_uniqueSelectionDispatcher","_MatExpansionPanelMixinBase","expanded","_getExpandedState","_lazyContent","_inputChanges","MatExpansionPanel","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","Host","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[attr.aria-expanded]","[@expansionHeight]","MatExpansionModule","CdkAccordionModule","MatExpansionPanelTitle","MatExpansionPanelDescription","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","positions","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","MatListBase","_MatListMixinBase","MatListItemBase","_init","_selectedDate","_getDateInCurrentMonth","_todayDate","today","_monthLabel","getMonthNames","getMonth","activeDate","toLocaleUpperCase","firstOfMonth","createDate","getYear","_firstWeekOffset","getDayOfWeek","getFirstDayOfWeek","_createWeekCells","daysInMonth","getNumDaysInMonth","dateNames","getDateNames","_weeks","cell","dateFilter","dateA11yLabel","MatCalendarCell","_hasSameMonthAndYear","getDate","d1","d2","selectedChange","_userSelection","createMissingDateImplError","_activeDate","oldActiveDate","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","_getActiveCell","yearName","getYearName","_selectedMonth","_getMonthInCurrentYear","_monthSelected","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_isMonthEnabled","addCalendarDays","startView","_dateFilterForViews","minDate","compareDate","maxDate","_startAt","_minDate","_maxDate","_clampedActiveDate","clampDate","_currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","startAt","_focusActiveCell","firstChange","view","monthView","yearView","multiYearView","_dateSelected","_userSelected","_goToDateInView","_currentPeriodClicked","_previousClicked","addCalendarMonths","addCalendarYears","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","_handleCalendarBodyKeydown","_handleCalendarBodyKeydownInMonthView","_handleCalendarBodyKeydownInYearView","_handleCalendarBodyKeydownInMultiYearView","date1","date2","yearsPerPage","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","_calendar","[class.mat-datepicker-content-touch]","_inputSubscription","_popupRef","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","isAttached","completeClose","afterClosed","componentInstance","_createPopup","keydownEvents","fallbackOffset","MatDialog","NG_VALIDATORS","target","targetElement","_parseValidator","matDatepickerParse","text","_minValidator","controlValue","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","Validators","compose","localeChanges","registerDatepicker","_registerInput","[attr.role]","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogContainer","uniqueId","MatDialogRef","_containerInstance","location","disableClose","_afterOpen","_beforeClose","_locationChanges","_animationStateChanged","phaseName","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","getConfig","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","MatDialogConfig","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","$implicit","previousValue","setAttribute","removeAttribute","overlayContainer","getContainerElement","parentElement","siblings","children","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","SvgIconConfig","url","svgElement","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","namespace","iconKey","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","log","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","_createSvgElementForSingleIcon","_svgElementFromString","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","_toSvgElement","str","div","innerHTML","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","MatTextareaAutosize","_minRows","_setMinHeight","_maxRows","_setMaxHeight","minRows","_cachedLineHeight","_setTextareaStyle","maxRows","resizeToFitContent","fromEvent","window","auditTime","_cacheTextareaLineHeight","textarea","textareaClone","rows","border","padding","overflow","force","_previousValue","placeholderText","scrollHeight","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_type","_readonly","_isServer","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[placeholder]","[required]","[readonly]","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","selectedYear","selectedMonth","selectedDate","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","indeterminate","_MatCheckboxMixinBase","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","MatBasicChip","MatChip","_selectable","_removable","destroyed","removed","onRemove","selectable","chip","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","MatChipRemove","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","registerInput","inputElement","_focusInput","code","isInputEmpty","_isInputEmpty","isPrevKey","isNextKey","isBackKey","setPreviousItemActive","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","correspondingChipIndex","updateActiveItemIndex","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipBlurChanges","_chipRemoveSubscription","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","focusInitialElementWhenReady","toFocus","_onAnimationStart","MatButton","focusMonitor","stopImmediatePropagation","MatAnchor","MatMiniFab","MatFab","MatButtonCssMatStyler","MatRaisedButtonCssMatStyler","MatIconButtonCssMatStyler","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","_uniqueIdCounter","MatButtonToggleChange","_updateButtonToggleNames","_updateSelectedButtonToggleFromValue","_buttonToggles","matchingButtonToggle","buttonToggle","_markButtonTogglesForCheck","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleGroupMultiple","toggleGroup","toggleGroupMultiple","_buttonToggleDispatcher","_isSingleSelector","buttonToggleGroup","buttonToggleGroupMultiple","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCard","MatCheckboxChange","MatCheckboxBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_removeFocusRipple","_onInteractionEvent","animSuffix","ngAfterViewChecked","_mostRecentViewValue","_emitSelectionChangeEvent","MatOptionSelectionChange","optionsArray","groups","groupCounter","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","[class.mat-right]","MatHint","MatPlaceholder","MatLabel","MatPrefix","MatSuffix","matFormFieldAnimations","transitionMessages","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","floatLabel","float","_hideRequiredMarker","_floatLabel","_processHints","_validateControlChild","_control","_validatePlaceholders","_syncDescribedByIds","valueChanges","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","shouldPlaceholderFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_animateAndLockLabel","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","[class.mat-input-invalid]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-focused]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","floatPlaceholder","_connectionContainerRef","_prefixChildren","_suffixChildren","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MatAutocomplete","showPanel","_isOpen","displayWith","optionSelected","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_manuallyFloatingLabel","_closeKeyEventStream","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","closePanel","_resetLabel","_closingActionsSubscription","_outsideClickStream","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","shouldAnimate","optionOffset","newScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","recalculateLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getHostWidth","_getConnectedElement","readOnly","aria-autocomplete","(focusin)","MatAutocompleteModule","DEFAULT_ROUND_BUTTON_COLOR","MatButtonBase","_MatButtonMixinBase","_isRoundButton","_hasHostAttributes","_isIconButton","attributes","_i","attribute","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","_color","colorPalette","defaultTabIndex","matcher","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","rect","distX","distY","sqrt","transformValue","webkitTransform","scrollStrategies","reposition","block","defaultOptions","parentRegistry","httpClient","sanitizer","provider","exp","match","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","LOCALE_ID","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","isIE","test","navigator","userAgent","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","_stripDirectionalityCharacters","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","UTC","getHours","getMinutes","getSeconds","getMilliseconds","timeZone","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","getTime","NaN","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","IGNORE_MOUSE_EVENTS_TIMEOUT","RippleRenderer","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","ripple","VISIBLE","_containerElement","containerRect","transitionDuration","rippleRef","FADING_IN","runTimeoutOutsideZone","rippleEl","RIPPLE_FADE_OUT_DURATION","FADING_OUT","fadeOutAll","_triggerElement","_removeTriggerEvents","ngZone","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]","_parent","setActiveStyles","setInactiveStyles"],"mappings":"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"}